{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Getting Started Quickstart Javascript Quickstart Nodejs Reference Authentication Connection Record RecordCursor BulkRequest App File KintoneAPIException License MIT Copyright Copyright(c) Cybozu, Inc.","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#getting-started","text":"Quickstart Javascript Quickstart Nodejs","title":"Getting Started"},{"location":"#reference","text":"Authentication Connection Record RecordCursor BulkRequest App File KintoneAPIException","title":"Reference"},{"location":"#license","text":"MIT","title":"License"},{"location":"#copyright","text":"Copyright(c) Cybozu, Inc.","title":"Copyright"},{"location":"versions/","text":"kintone-js-sdk Versions Current Version (Latest) Latest version of kintone-js-sdk. Versions Documentation Release 0.7.7 Documentation Release Notes Past Versions Here you can find documentation for previous versions of kintone-js-sdk. Versions Documentation Release 0.7.6 Documentation Release Notes 0.7.5 Documentation Release Notes 0.7.4 Documentation Release Notes 0.7.3 Documentation Release Notes 0.7.1 Documentation Release Notes 0.7.0 Documentation Release Notes 0.6.4 Documentation Release Notes 0.6.2 Documentation Release Notes 0.6.1 Documentation Release Notes 0.5.1 Documentation Release Notes 0.5.0 Documentation Release Notes 0.4.2 Documentation Release Notes 0.4.1 Documentation Release Notes 0.4.0 Documentation Release Notes 0.3.2 Documentation Release Notes 0.3.1 Documentation Release Notes 0.3.0 Documentation Release Notes 0.2.0 Documentation Release Notes 0.1.1 Documentation Release Notes","title":"kintone-js-sdk Versions"},{"location":"versions/#kintone-js-sdk-versions","text":"","title":"kintone-js-sdk Versions"},{"location":"versions/#current-version-latest","text":"Latest version of kintone-js-sdk. Versions Documentation Release 0.7.7 Documentation Release Notes","title":"Current Version (Latest)"},{"location":"versions/#past-versions","text":"Here you can find documentation for previous versions of kintone-js-sdk. Versions Documentation Release 0.7.6 Documentation Release Notes 0.7.5 Documentation Release Notes 0.7.4 Documentation Release Notes 0.7.3 Documentation Release Notes 0.7.1 Documentation Release Notes 0.7.0 Documentation Release Notes 0.6.4 Documentation Release Notes 0.6.2 Documentation Release Notes 0.6.1 Documentation Release Notes 0.5.1 Documentation Release Notes 0.5.0 Documentation Release Notes 0.4.2 Documentation Release Notes 0.4.1 Documentation Release Notes 0.4.0 Documentation Release Notes 0.3.2 Documentation Release Notes 0.3.1 Documentation Release Notes 0.3.0 Documentation Release Notes 0.2.0 Documentation Release Notes 0.1.1 Documentation Release Notes","title":"Past Versions"},{"location":"getting-started/quickstart-browser/","text":"Quickstart Javascript Create a customization Using kintone-js-sdk.min.js file Attach a below file from './dist' folder in kintone-js-sdk into kintone app kintone-js-sdk.min.js Create index.js file (function () { kintone.events.on(\"app.record.index.show\", function (ev) { var app = new kintoneJSSDK.App(); app.getApps().then(rsp => { console.log(rsp); }).catch(err => { console.log(err.get()); }); }); }()); Attach index.js file into kintone app setting Install package from npm Step 1: Run commands $ mkdir test $ cd ./test $ mkdir src $ mkdir dist Step 2: Add the below files to test/ folder package.json file { \"name\": \"use-kintone-js-sdk\", \"version\": \"0.1.0\", \"description\": \"\", \"main\": \"src/index.js\", \"license\": \"\", \"author\": \"Cybozu, Inc.\", \"scripts\": { \"build\": \"webpack --mode development --watch\" }, \"repository\": { \"type\": \"git\", \"url\": \"\" }, \"directories\": { \"doc\": \"\" }, \"dependencies\": { \"cross-env\": \"^5.1.3\", \"@kintone/kintone-js-sdk\": \"*\" }, \"devDependencies\": { \"@babel/core\": \"^7.0.0\", \"@babel/preset-env\": \"^7.0.0\", \"babel-loader\": \"^8.0.2\", \"webpack\": \"^4.17.2\", \"webpack-cli\": \"^3.1.0\" } } webpack.config.js file const path = require('path'); module.exports = (env = {}) => { return { entry: { 'index.min': './src/index.js' }, output: { path: path.resolve(__dirname, 'dist'), filename: '[name].js', }, module: { rules: [ { test: /\\.js$/, include: [require.resolve('@kintone/kintone-js-sdk')], use: { loader: 'babel-loader' }, } ] }, watch: env.watch }; }; .babelrc file { \"presets\": [ \"@babel/preset-env\" ] } Step 3: Add the index.js file to src/ folder import {Connection, App} from '@kintone/kintone-js-sdk'; kintone.events.on(\"app.record.index.show\", function (ev) { const app = new App(); app.getApps().then(rsp => { console.log(rsp); }).catch(err => { console.log(err.get()); }); }); Step 4: Run belows command $ npm install $ npm run build result: * ./dist/index.min.js Attach index.min.js file into kintone app setting","title":"Quickstart Javascript"},{"location":"getting-started/quickstart-browser/#quickstart-javascript","text":"","title":"Quickstart Javascript"},{"location":"getting-started/quickstart-browser/#create-a-customization","text":"","title":"Create a customization"},{"location":"getting-started/quickstart-browser/#using-kintone-js-sdkminjs-file","text":"Attach a below file from './dist' folder in kintone-js-sdk into kintone app kintone-js-sdk.min.js Create index.js file (function () { kintone.events.on(\"app.record.index.show\", function (ev) { var app = new kintoneJSSDK.App(); app.getApps().then(rsp => { console.log(rsp); }).catch(err => { console.log(err.get()); }); }); }()); Attach index.js file into kintone app setting","title":"Using kintone-js-sdk.min.js file"},{"location":"getting-started/quickstart-browser/#install-package-from-npm","text":"Step 1: Run commands $ mkdir test $ cd ./test $ mkdir src $ mkdir dist Step 2: Add the below files to test/ folder package.json file { \"name\": \"use-kintone-js-sdk\", \"version\": \"0.1.0\", \"description\": \"\", \"main\": \"src/index.js\", \"license\": \"\", \"author\": \"Cybozu, Inc.\", \"scripts\": { \"build\": \"webpack --mode development --watch\" }, \"repository\": { \"type\": \"git\", \"url\": \"\" }, \"directories\": { \"doc\": \"\" }, \"dependencies\": { \"cross-env\": \"^5.1.3\", \"@kintone/kintone-js-sdk\": \"*\" }, \"devDependencies\": { \"@babel/core\": \"^7.0.0\", \"@babel/preset-env\": \"^7.0.0\", \"babel-loader\": \"^8.0.2\", \"webpack\": \"^4.17.2\", \"webpack-cli\": \"^3.1.0\" } } webpack.config.js file const path = require('path'); module.exports = (env = {}) => { return { entry: { 'index.min': './src/index.js' }, output: { path: path.resolve(__dirname, 'dist'), filename: '[name].js', }, module: { rules: [ { test: /\\.js$/, include: [require.resolve('@kintone/kintone-js-sdk')], use: { loader: 'babel-loader' }, } ] }, watch: env.watch }; }; .babelrc file { \"presets\": [ \"@babel/preset-env\" ] } Step 3: Add the index.js file to src/ folder import {Connection, App} from '@kintone/kintone-js-sdk'; kintone.events.on(\"app.record.index.show\", function (ev) { const app = new App(); app.getApps().then(rsp => { console.log(rsp); }).catch(err => { console.log(err.get()); }); }); Step 4: Run belows command $ npm install $ npm run build result: * ./dist/index.min.js Attach index.min.js file into kintone app setting","title":"Install package from npm"},{"location":"getting-started/quickstart-node/","text":"Quickstart Nodejs Requirement Node.js (Version 8.9.3 or later) npm (Version 5.5.1 or later) How to use Step 1: Run commands $ mkdir test $ cd ./test $ npm init $ npm install --save @kintone/kintone-js-sdk Step 2: Add index.js file to test/ folder Get record sample Promise const kintone = require('@kintone/kintone-js-sdk'); let auth = new kintone.Auth(); const passwordAuthParam = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; auth.setPasswordAuth(passwordAuthParam); const connParam = { domain: 'YOUR_DOMAIN', auth: auth }; let connection = new kintone.Connection(connParam); let kintoneRecord = new kintone.Record({connection}); const params = { app: 'YOUR_APPID', id: 'RECORD_ID' }; kintoneRecord.getRecord(params).then((rsp) => { console.log(rsp); }).catch((err) => { // The promise function always reject with KintoneAPIExeption console.log(err.get()); }); async/await const kintone = require('@kintone/kintone-js-sdk'); let auth = new kintone.Auth(); const passwordAuthParam = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; auth.setPasswordAuth(passwordAuthParam); const connParam = { domain: 'YOUR_DOMAIN', auth: auth }; const connection = new kintone.Connection(connParam); const kintoneRecord = new kintone.Record({connection}); const params = { app: 'YOUR_APPID', id: 'RECORD_ID' }; const getRecord = async () => { try { let recordResult = await kintoneRecord.getRecord(params); console.log(recordResult); } catch (error) { // The promise function always reject with KintoneAPIExeption console.log(error.get()); } } getRecord(); Step 3: Run index.js file $ node index.js Get record response Response success { \"record\":{ // record data should be here } } Response error { id: '{ID}', code: '{CODE}', message: '{Message string}', errors: '{JSON String}' }","title":"Quickstart Nodejs"},{"location":"getting-started/quickstart-node/#quickstart-nodejs","text":"","title":"Quickstart Nodejs"},{"location":"getting-started/quickstart-node/#requirement","text":"Node.js (Version 8.9.3 or later) npm (Version 5.5.1 or later)","title":"Requirement"},{"location":"getting-started/quickstart-node/#how-to-use","text":"Step 1: Run commands $ mkdir test $ cd ./test $ npm init $ npm install --save @kintone/kintone-js-sdk Step 2: Add index.js file to test/ folder Get record sample Promise const kintone = require('@kintone/kintone-js-sdk'); let auth = new kintone.Auth(); const passwordAuthParam = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; auth.setPasswordAuth(passwordAuthParam); const connParam = { domain: 'YOUR_DOMAIN', auth: auth }; let connection = new kintone.Connection(connParam); let kintoneRecord = new kintone.Record({connection}); const params = { app: 'YOUR_APPID', id: 'RECORD_ID' }; kintoneRecord.getRecord(params).then((rsp) => { console.log(rsp); }).catch((err) => { // The promise function always reject with KintoneAPIExeption console.log(err.get()); }); async/await const kintone = require('@kintone/kintone-js-sdk'); let auth = new kintone.Auth(); const passwordAuthParam = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; auth.setPasswordAuth(passwordAuthParam); const connParam = { domain: 'YOUR_DOMAIN', auth: auth }; const connection = new kintone.Connection(connParam); const kintoneRecord = new kintone.Record({connection}); const params = { app: 'YOUR_APPID', id: 'RECORD_ID' }; const getRecord = async () => { try { let recordResult = await kintoneRecord.getRecord(params); console.log(recordResult); } catch (error) { // The promise function always reject with KintoneAPIExeption console.log(error.get()); } } getRecord(); Step 3: Run index.js file $ node index.js Get record response Response success { \"record\":{ // record data should be here } } Response error { id: '{ID}', code: '{CODE}', message: '{Message string}', errors: '{JSON String}' }","title":"How to use"},{"location":"reference/app/","text":"App Gets general information of an App, including the name, description, related Space, creator and updater information. Permissions to view the App is needed. API Tokens cannot be used with this API. Constructor Parameters Name Type Required Description params Object (conditional) Required for nodejs Constructor params. params.connection Connection (conditional) The connection module of this SDK. If initializing in browser environment on kintone, this parameter can be ommited to use session authentication. Sample code Init app sample Javascript (function(kintoneJSSDK) { 'use strict'; // with connection // Define Authentication object var kintoneAuth = new kintoneJSSDK.Auth(); var paramsAuth = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; kintoneAuth.setPasswordAuth(paramsAuth); var paramsConnection = { domain: 'YOUR_DOMAIN', auth: kintoneAuth }; var connection = new kintoneJSSDK.Connection(paramsConnection); // with connection var kintoneApp = new kintoneJSSDK.App({connection}); // without connection, module will use session authentication of kintone var kintoneApp = new kintoneJSSDK.App(); }(window.kintoneJSSDK)); Nodejs const kintone = require('@kintone/kintone-js-sdk'); const kintoneAuth = new kintone.Auth(); const paramsAuth = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; kintoneAuth.setPasswordAuth(paramsAuth); const paramsConnection = { domain: 'YOUR_DOMAIN', auth: kintoneAuth }; const connection = new kintone.Connection(paramsConnection); const kintoneApp = new kintone.App({connection}); Methods getApp(params) Get single app Parameters Name Type Required Description params Object yes Get app params. params.id Integer yes The kintone app ID Return Promise Sample code Get app sample Javascript var id = YOUR_APP_ID; kintoneApp.getApp({id}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const id = YOUR_APP_ID; kintoneApp.getApp({id}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); getApps(params) Get multiple apps Parameters Name Type Required Description params Object (optional) Get apps params. params.offset Integer (optional) The offset off data result params.limit Integer (optional) The limit number of result Return Promise Sample code Get apps sample Javascript var limit = YOUR_LIMIT_NUMBER; var offset = YOUR_OFFSET_NUMBER; kintoneApp.getApps({offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const limit = YOUR_LIMIT_NUMBER; const offset = YOUR_OFFSET_NUMBER; kintoneApp.getApps({offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); getAppsByIDs(params) Get multiple apps by list of ids Parameters Name Type Required Description params Object yes Get apps by ids params. params.ids Array<Integer> (optional) The array of app ids params.offset Integer (optional) The offset off data result params.limit Integer (optional) The limit number of result Return Promise Sample code Get apps sample Javascript var ids = [YOUR_APP_ID_1, YOUR_APP_ID_2, YOUR_APP_ID_n]; var limit = YOUR_LIMIT_NUMBER; var offset = YOUR_OFFSET_NUMBER; kintoneApp.getAppsByIDs({ids, offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const ids = [YOUR_APP_ID_1, YOUR_APP_ID_2, YOUR_APP_ID_n]; const limit = YOUR_LIMIT_NUMBER; const offset = YOUR_OFFSET_NUMBER; kintoneApp.getAppsByIDs({ids, offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); getAppsByCodes(params) Get multiple apps by a list of codes name Parameters Name Type Required Description params Object yes Get apps by codes params. params.codes Array<String> (optional) The array of app codes params.offset Integer (optional) The offset off data result params.limit Integer (optional) The limit number of result Return Promise Sample code Get apps sample Javascript var codes = ['YOUR_APP_CODE_1', 'YOUR_APP_CODE_2']; var limit = YOUR_LIMIT_NUMBER; var offset = YOUR_OFFSET_NUMBER; kintoneApp.getAppsByCodes({codes, offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const codes = ['YOUR_APP_CODE_1', 'YOUR_APP_CODE_2']; const limit = YOUR_LIMIT_NUMBER; const offset = YOUR_OFFSET_NUMBER; kintoneApp.getAppsByCodes({codes, offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); getAppsByName(params) Get multiple apps by name Parameters Name Type Required Description params Object yes Get apps by name params. params.name String (optional) The app name params.offset Integer (optional) The offset off data result params.limit Integer (optional) The limit number of result Return Promise Sample code Get apps sample Javascript var name = 'YOUR_APP_NAME'; var limit = YOUR_LIMIT_NUMBER; var offset = YOUR_OFFSET_NUMBER; kintoneApp.getAppsByName({name, offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const name = 'YOUR_APP_NAME'; const limit = YOUR_LIMIT_NUMBER; const offset = YOUR_OFFSET_NUMBER; kintoneApp.getAppsByName({name, offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); getAppsBySpaceIDs(params) Get multiple apps by list of space's ids Parameters Name Type Required Description params Object yes Get apps by space ids params. params.spaceIds Array<Integer> (optional) The array of space ids params.offset Integer (optional) The offset off data result params.limit Integer (optional) The limit number of result Return Promise Sample code Get apps sample Javascript var spaceIds = []; var limit = YOUR_LIMIT_NUMBER; var offset = YOUR_OFFSET_NUMBER; kintoneApp.getAppsBySpaceIDs({spaceIds, offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const spaceIds = []; const limit = YOUR_LIMIT_NUMBER; const offset = YOUR_OFFSET_NUMBER; kintoneApp.getAppsBySpaceIDs({spaceIds, offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); addPreviewApp(params) Creates a preview App. Warning After using this method, use the deployAppSettings to deploy the settings to the live App. Parameters Name Type Required Description params Object yes Params to add preview app. params.name String yes The App name. The maximum length is 64 characters. params.space Integer (optional) The Space ID of where the App will be created. params.thread Integer (optional) The Thread ID of the thread in the Space where the App will be created. It is recommended to ignore this parameter so that Apps are created in the default thread. There is currently no helpful reason to create Apps in threads other than the default thread, as there are no visual representations in kintone of Apps being related to threads. There are only visual representations of Apps being related to Spaces. Return Promise Sample code Add preview App sample Javascript var name = 'YOUR_APP_NAME'; var space = YOUR_APP_SPACE_ID; var thread = YOUR_THREAD_ID_OF_SPACE; kintoneApp.addPreviewApp({name, space, thread}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const name = 'YOUR_APP_NAME'; const space = YOUR_APP_SPACE_ID; const thread = YOUR_THREAD_ID_OF_SPACE; kintoneApp.addPreviewApp({name, space, thread}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); deployAppSettings(params) Updates the settings of a pre-live App to the live App. Parameters Name Type Required Description params Object yes Params to deploy app settings. params.apps Array<JSONObject> yes The list of preview apps. params.revert Boolean (optional) Specify \"true\" to cancel all changes made to the pre-live settings. The pre-live settings will be reverted back to the current settings of the live app. Return Promise Sample code Deploy app settings sample Javascript var apps = [ { revision: YOUR_REVISION, app: YOUR_APP_ID } // Another app preview here ]; var revert = false; kintoneApp.deployAppSettings({apps, revert}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const apps = [ { revision: YOUR_REVISION, app: YOUR_APP_ID } // Another app preview here ]; const revert = false; kintoneApp.deployAppSettings({apps, revert}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); getAppDeployStatus(params) Gets the deployment status of the App settings for multiple Apps. Parameters Name Type Required Description params Object yes Get app deploy status params. params.apps Array<Integer> yes The list of Apps to check the deploy statuses of. The Maximum limit is 300. If Apps in Guest Spaces are specified, all Apps specified in the request must belong to that Guest Space. Return Promise Sample code Get app deploy status sample Javascript var apps = [ YOUR_APP_ID // Another app id here ]; kintoneApp.getAppDeployStatus({apps}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const apps = [ YOUR_APP_ID // Another app id here ]; kintoneApp.getAppDeployStatus({apps}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); getViews(params) Gets the View settings of a an App. Parameters Name Type Required Description params Object yes Get views params. params.app Integer yes The app ID params.lang String (optional) The language code. Support: DEFAULT: Default language setting of system JA: Japanese language setting ZH: Chinese language setting EN: English language setting params.isPreview Boolean (optional) Get the views with a pre-live settings . Return Promise Sample code Get views sample Javascript var app = YOUR_APP_ID; var lang = 'LANGUAGE_CODE'; // Ex: JA kintoneApp.getViews({app, lang}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); // Get a pre-live (preview) views var previewApp = YOUR_APP_ID; var previewLang = 'LANGUAGE_CODE'; // Ex: JA var isPreview = true; kintoneApp.getViews({app: previewApp, lang: previewLang, isPreview}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const lang = 'LANGUAGE_CODE'; // Ex: JA kintoneApp.getViews({app, lang}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); // Get a pre-live (preview) views const previewApp = YOUR_APP_ID; const previewLang = 'LANGUAGE_CODE'; // Ex: JA const isPreview = true; kintoneApp.getViews({app: previewApp, lang: previewLang, isPreview}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); updateViews(params) Get field of form in kintone app Parameters Name Type Required Description params Object yes Params to update views. params.app Integer yes The app ID params.views JSONObject yes An object of data of Views. About the format, please look the sample below or reference at the end of this page params.revision Integer (optional) Specify the revision number of the settings that will be deployed. Return Promise Sample code Update views sample Javascript var app = YOUR_APP_ID; var views = { 'YOUR_VIEW_NAME': { 'index': 0, 'type': 'YOUR_VIEW_TYPE', // Default: 'LIST', 'CALENDAR', 'CUSTOM' 'name': 'YOUR_VIEW_NAME', 'fields': [ 'YOUR_FIELD_CODE' // Another field code here ], 'filterCond': 'YOUR_QUERY', 'sort': 'YOUR_SORT' } // Another view here }; var revision = 'YOUR_SETTINGS_REVISION'; kintoneApp.updateViews({app, views, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const views = { \"YOUR_VIEW_NAME\": { \"index\": 0, \"type\": \"YOUR_VIEW_TYPE\", // Default: 'LIST', 'CALENDAR', 'CUSTOM' \"name\": \"YOUR_VIEW_NAME\", \"fields\": [ \"YOUR_FIELD_CODE\" // Another field code here ], \"filterCond\": \"YOUR_QUERY\", \"sort\": \"YOUR_SORT\" } // Another view here }; const revision = 'YOUR_SETTINGS_REVISION'; kintoneApp.updateViews({app, views, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); getGeneralSettings(params) Gets the description, name, icon, revision and color theme of an App. Parameters Name Type Required Description params Object yes Get general settings params. params.app Integer yes The app ID params.lang String (optional) The language code. Support: DEFAULT: Default language setting of system JA: English language setting ZH: Chinese language setting EN: English language setting params.isPreview Boolean (optional) Get the general with a pre-live settings . Return Promise Sample code Get general settings sample Javascript var app = YOUR_APP_ID; var lang = 'LANGUAGE_CODE'; // Ex: JA kintoneApp.getGeneralSettings({app, lang}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); // Get a pre-live (preview) general settings var app = YOUR_APP_ID; var lang = 'LANGUAGE_CODE'; // Ex: JA var isPreview = true; kintoneApp.getGeneralSettings({app, lang, isPreview}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const lang = 'LANGUAGE_CODE'; // Ex: JA kintoneApp.getGeneralSettings({app, lang}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); // Get a pre-live (preview) general settings const app = YOUR_APP_ID; const lang = 'LANGUAGE_CODE'; // Ex: JA const isPreview = true; kintoneApp.getGeneralSettings({app, lang, isPreview}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); updateGeneralSettings(params) Update the description, name, icon, revision and color theme of an App. Parameters Name Type Required Description params Object yes Params to update general settings. params.app Integer yes The app ID params.name String (Conditional) Name of an App. params.description String (Conditional) The description of an App. params.icon Icon (Conditional) The icon of an App. params.theme String (Conditional) Color theme of an App. params.revision Integer (optional) Specify the revision number of the settings that will be deployed. Return Promise Sample code Update general settings sample Javascript var params= { app: YOUR_APP_ID, name: 'YOUR_APP_NAME', description: 'YOUR_COOL_DESCRIPTION', icon: { type: 'YOUR_ICON_TYPE', // specified: FILE, PRESET key: 'YOUR_ICON_KEY' }, theme: 'YOUR_THEME', // specified: WHITE, RED, BLUE, GREEN, YELLOW, BLACK revision: 'YOUR_SETTINGS_REVISION' }; kintoneApp.updateGeneralSettings(params).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs var params= { app: YOUR_APP_ID, name: 'YOUR_APP_NAME', description: 'YOUR_COOL_DESCRIPTION', icon: { type: 'YOUR_ICON_TYPE', // specified: FILE, PRESET key: 'YOUR_ICON_KEY' }, theme: 'YOUR_THEME', // specified: WHITE, RED, BLUE, GREEN, YELLOW, BLACK revision: 'YOUR_SETTINGS_REVISION' }; kintoneApp.updateGeneralSettings(params).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); getFormFields(params) Get field of form in kintone app Parameters Name Type Required Description params Object yes Get form fields params. params.app Integer yes The app ID params.lang String (optional) The language code. Support: DEFAULT: Default language setting of system JA: English language setting ZH: Chinese language setting EN: English language setting params.isPreview Boolean (optional) Get the app form fields with a pre-live settings . Return Promise Sample code Get app form field sample Javascript var app = YOUR_APP_ID; var lang = 'LANGUAGE_CODE'; // Ex: JA kintoneApp.getFormFields({app, lang}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); // Get a pre-live (preview) form fields var app = YOUR_APP_ID; var lang = 'LANGUAGE_CODE'; // Ex: JA var isPreview = true; kintoneApp.getFormFields({app, lang, isPreview}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const lang = 'LANGUAGE_CODE'; // Ex: JA kintoneApp.getFormFields({app, lang}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); // Get a pre-live (preview) form fields const app = YOUR_APP_ID; const lang = 'LANGUAGE_CODE'; // Ex: JA const isPreview = true; kintoneApp.getFormFields({app, lang, isPreview}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); addFormFields(params) Adds fields to a form of an App. Warning After using this method, use the deployAppSettings to deploy the settings to the live App. Parameters Name Type Required Description params Object yes Params to add form fields. params.app Integer yes The app ID params.fields JSONObject yes The formFields which will add to form of kintone app. About the format, please look the sample below or reference at the end of this params.revision Integer (optional) Specify the revision number of the settings that will be deployed. Return Promise Sample code Add app form field sample Javascript var app = YOUR_APP_ID; var fields = { 'YOUR_FIELD_CODE': { 'type': 'SINGLE_LINE_TEXT', 'code': 'YOUR_FIELD_CODE', 'label': 'Text (single-line)', 'noLabel': false, 'required': true, 'unique': true } // Another field here }; var revision = 'YOUR_SETTINGS_REVISION'; kintoneApp.addFormFields({app, fields, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const fields = { 'YOUR_FIELD_CODE': { 'type': 'SINGLE_LINE_TEXT', 'code': 'YOUR_FIELD_CODE', 'label': 'Text (single-line)', 'noLabel': false, 'required': true, 'unique': true } // Another field here }; const revision = 'YOUR_SETTINGS_REVISION'; kintoneApp.addFormFields({app, fields, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); updateFormFields(params) Updates the field settings of fields in a form of an App. Warning After using this method, use the deployAppSettings to deploy the settings to the live App. Parameters Name Type Required Description params Object yes Params to update form fields. params.app Integer yes The app ID params.fields JSONObject yes The formFields which will add to form of kintone app. About the format, please look the sample below or reference at the end of this params.revision Integer (optional) Specify the revision number of the settings that will be deployed. Return Promise Sample code Update app form field sample Javascript var app = YOUR_APP_ID; var fields = { 'YOUR_FIELD_CODE': { 'type': 'SINGLE_LINE_TEXT', 'code': 'YOUR_FIELD_CODE', 'label': 'Text (single-line)', 'noLabel': false, 'required': true, 'unique': true } // Another field here }; var revision = 'the_revision_of_the_settings '; kintoneApp.updateFormFields({app, fields, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const fields = { 'YOUR_FIELD_CODE': { 'type': 'SINGLE_LINE_TEXT', 'code': 'YOUR_FIELD_CODE', 'label': 'Text (single-line)', 'noLabel': false, 'required': true, 'unique': true } // Another field here }; const revision = 'YOUR_SETTINGS_REVISION'; kintoneApp.updateFormFields({app, fields, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); deleteFormFields(params) Updates the field settings of fields in a form of an App. Warning After using this method, use the deployAppSettings to deploy the settings to the live App. Parameters Name Type Required Description params Object yes Params to delete form fields. params.app Integer yes The app ID params.fields Array<String> yes The list of field codes of the fields to delete. Up to 100 field codes can be specified. params.revision Integer (optional) Specify the revision number of the settings that will be deployed. Return Promise Sample code Delete app form field sample Javascript var app = YOUR_APP_ID; var fields = [ 'YOUR_FIELD_CODE' // Another field code here ]; var revision = 'YOUR_SETTINGS_REVISION'; kintoneApp.deleteFormFields({app, fields, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const fields = [ 'YOUR_FIELD_CODE' // Another field code here ]; const revision = 'YOUR_SETTINGS_REVISION'; kintoneApp.deleteFormFields({app, fields, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); getFormLayout(params) Get layout of form in kintone app Parameters Name Type Required Description params Object yes Get form layout params. params.app Integer yes The kintone app id params.isPreview Boolean (optional) Get the app form layout with a pre-live settings . Return Promise Sample code Get form layout sample Javascript var app = YOUR_APP_ID; // Get form layout kintoneApp.getFormLayout({app}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); // Get a preview (pre-live) form layout var isPreview = true; kintoneApp.getFormLayout({app, isPreview}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; // Get form layout kintoneApp.getFormLayout({app}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); // Get a preview (pre-live) form layout const isPreview = true; kintoneApp.getFormLayout({app, isPreview}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); updateFormLayout(params) Updates the field layout info of a form in an App. Warning After using this method, use the deployAppSettings to deploy the settings to the live App. Parameters Name Type Required Description params Object yes Params to update form layout. params.app Integer yes The kintone app id params.layout Array<JSONObject> yes A list of field layouts for each row. About the format, please look the sample below or reference at the end of this page. params.revision Integer (optional) Specify the revision number of the settings that will be deployed. The request will fail if the revision number is not the latest revision. Return Promise Sample code Update form layout sample Javascript var app = YOUR_APP_ID; var firstRowLayout = { 'type': 'YOUR_LAYOUT_TYPE', 'fields': [ { 'type': 'YOUR_FIELD_TYPE', 'code': 'YOUR_FIELD_CODE', 'size': { 'width': 'YOUR_FIELD_WIDTH' } } ] }; var layout = [ firstRowLayout // Another row layout here ]; var revision = 'YOUR_SETTINGS_REVISION'; // Update form layout kintoneApp.updateFormLayout({app, layout, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const fisrtRowLayout = { 'type': 'YOUR_LAYOUT_TYPE', 'fields': [ { 'type': 'YOUR_FIELD_TYPE', 'code': 'YOUR_FIELD_CODE', 'size': { 'width': 'YOUR_FIELD_WIDTH' } } ] }; const layout = [ fisrtRowLayout // Another row layout here ]; const revision = 'YOUR_SETTINGS_REVISION'; // Update form layout kintoneApp.updateFormLayout({app, layout, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Reference Developer network's reference: Get App Get Apps Get Form fields Add Form Fields Update Form Fields Delete Form Fields Get Form Layout Deploy App Settings Get App Deploy Status Get Views Update Views Get General Settings Update General Settings Get Form Layout Update Form Layout","title":"App"},{"location":"reference/app/#app","text":"Gets general information of an App, including the name, description, related Space, creator and updater information. Permissions to view the App is needed. API Tokens cannot be used with this API.","title":"App"},{"location":"reference/app/#constructor","text":"Parameters Name Type Required Description params Object (conditional) Required for nodejs Constructor params. params.connection Connection (conditional) The connection module of this SDK. If initializing in browser environment on kintone, this parameter can be ommited to use session authentication. Sample code Init app sample Javascript (function(kintoneJSSDK) { 'use strict'; // with connection // Define Authentication object var kintoneAuth = new kintoneJSSDK.Auth(); var paramsAuth = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; kintoneAuth.setPasswordAuth(paramsAuth); var paramsConnection = { domain: 'YOUR_DOMAIN', auth: kintoneAuth }; var connection = new kintoneJSSDK.Connection(paramsConnection); // with connection var kintoneApp = new kintoneJSSDK.App({connection}); // without connection, module will use session authentication of kintone var kintoneApp = new kintoneJSSDK.App(); }(window.kintoneJSSDK)); Nodejs const kintone = require('@kintone/kintone-js-sdk'); const kintoneAuth = new kintone.Auth(); const paramsAuth = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; kintoneAuth.setPasswordAuth(paramsAuth); const paramsConnection = { domain: 'YOUR_DOMAIN', auth: kintoneAuth }; const connection = new kintone.Connection(paramsConnection); const kintoneApp = new kintone.App({connection});","title":"Constructor"},{"location":"reference/app/#methods","text":"","title":"Methods"},{"location":"reference/app/#getappparams","text":"Get single app Parameters Name Type Required Description params Object yes Get app params. params.id Integer yes The kintone app ID Return Promise Sample code Get app sample Javascript var id = YOUR_APP_ID; kintoneApp.getApp({id}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const id = YOUR_APP_ID; kintoneApp.getApp({id}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"getApp(params)"},{"location":"reference/app/#getappsparams","text":"Get multiple apps Parameters Name Type Required Description params Object (optional) Get apps params. params.offset Integer (optional) The offset off data result params.limit Integer (optional) The limit number of result Return Promise Sample code Get apps sample Javascript var limit = YOUR_LIMIT_NUMBER; var offset = YOUR_OFFSET_NUMBER; kintoneApp.getApps({offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const limit = YOUR_LIMIT_NUMBER; const offset = YOUR_OFFSET_NUMBER; kintoneApp.getApps({offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"getApps(params)"},{"location":"reference/app/#getappsbyidsparams","text":"Get multiple apps by list of ids Parameters Name Type Required Description params Object yes Get apps by ids params. params.ids Array<Integer> (optional) The array of app ids params.offset Integer (optional) The offset off data result params.limit Integer (optional) The limit number of result Return Promise Sample code Get apps sample Javascript var ids = [YOUR_APP_ID_1, YOUR_APP_ID_2, YOUR_APP_ID_n]; var limit = YOUR_LIMIT_NUMBER; var offset = YOUR_OFFSET_NUMBER; kintoneApp.getAppsByIDs({ids, offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const ids = [YOUR_APP_ID_1, YOUR_APP_ID_2, YOUR_APP_ID_n]; const limit = YOUR_LIMIT_NUMBER; const offset = YOUR_OFFSET_NUMBER; kintoneApp.getAppsByIDs({ids, offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"getAppsByIDs(params)"},{"location":"reference/app/#getappsbycodesparams","text":"Get multiple apps by a list of codes name Parameters Name Type Required Description params Object yes Get apps by codes params. params.codes Array<String> (optional) The array of app codes params.offset Integer (optional) The offset off data result params.limit Integer (optional) The limit number of result Return Promise Sample code Get apps sample Javascript var codes = ['YOUR_APP_CODE_1', 'YOUR_APP_CODE_2']; var limit = YOUR_LIMIT_NUMBER; var offset = YOUR_OFFSET_NUMBER; kintoneApp.getAppsByCodes({codes, offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const codes = ['YOUR_APP_CODE_1', 'YOUR_APP_CODE_2']; const limit = YOUR_LIMIT_NUMBER; const offset = YOUR_OFFSET_NUMBER; kintoneApp.getAppsByCodes({codes, offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"getAppsByCodes(params)"},{"location":"reference/app/#getappsbynameparams","text":"Get multiple apps by name Parameters Name Type Required Description params Object yes Get apps by name params. params.name String (optional) The app name params.offset Integer (optional) The offset off data result params.limit Integer (optional) The limit number of result Return Promise Sample code Get apps sample Javascript var name = 'YOUR_APP_NAME'; var limit = YOUR_LIMIT_NUMBER; var offset = YOUR_OFFSET_NUMBER; kintoneApp.getAppsByName({name, offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const name = 'YOUR_APP_NAME'; const limit = YOUR_LIMIT_NUMBER; const offset = YOUR_OFFSET_NUMBER; kintoneApp.getAppsByName({name, offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"getAppsByName(params)"},{"location":"reference/app/#getappsbyspaceidsparams","text":"Get multiple apps by list of space's ids Parameters Name Type Required Description params Object yes Get apps by space ids params. params.spaceIds Array<Integer> (optional) The array of space ids params.offset Integer (optional) The offset off data result params.limit Integer (optional) The limit number of result Return Promise Sample code Get apps sample Javascript var spaceIds = []; var limit = YOUR_LIMIT_NUMBER; var offset = YOUR_OFFSET_NUMBER; kintoneApp.getAppsBySpaceIDs({spaceIds, offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const spaceIds = []; const limit = YOUR_LIMIT_NUMBER; const offset = YOUR_OFFSET_NUMBER; kintoneApp.getAppsBySpaceIDs({spaceIds, offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"getAppsBySpaceIDs(params)"},{"location":"reference/app/#addpreviewappparams","text":"Creates a preview App. Warning After using this method, use the deployAppSettings to deploy the settings to the live App. Parameters Name Type Required Description params Object yes Params to add preview app. params.name String yes The App name. The maximum length is 64 characters. params.space Integer (optional) The Space ID of where the App will be created. params.thread Integer (optional) The Thread ID of the thread in the Space where the App will be created. It is recommended to ignore this parameter so that Apps are created in the default thread. There is currently no helpful reason to create Apps in threads other than the default thread, as there are no visual representations in kintone of Apps being related to threads. There are only visual representations of Apps being related to Spaces. Return Promise Sample code Add preview App sample Javascript var name = 'YOUR_APP_NAME'; var space = YOUR_APP_SPACE_ID; var thread = YOUR_THREAD_ID_OF_SPACE; kintoneApp.addPreviewApp({name, space, thread}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const name = 'YOUR_APP_NAME'; const space = YOUR_APP_SPACE_ID; const thread = YOUR_THREAD_ID_OF_SPACE; kintoneApp.addPreviewApp({name, space, thread}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"addPreviewApp(params)"},{"location":"reference/app/#deployappsettingsparams","text":"Updates the settings of a pre-live App to the live App. Parameters Name Type Required Description params Object yes Params to deploy app settings. params.apps Array<JSONObject> yes The list of preview apps. params.revert Boolean (optional) Specify \"true\" to cancel all changes made to the pre-live settings. The pre-live settings will be reverted back to the current settings of the live app. Return Promise Sample code Deploy app settings sample Javascript var apps = [ { revision: YOUR_REVISION, app: YOUR_APP_ID } // Another app preview here ]; var revert = false; kintoneApp.deployAppSettings({apps, revert}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const apps = [ { revision: YOUR_REVISION, app: YOUR_APP_ID } // Another app preview here ]; const revert = false; kintoneApp.deployAppSettings({apps, revert}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"deployAppSettings(params)"},{"location":"reference/app/#getappdeploystatusparams","text":"Gets the deployment status of the App settings for multiple Apps. Parameters Name Type Required Description params Object yes Get app deploy status params. params.apps Array<Integer> yes The list of Apps to check the deploy statuses of. The Maximum limit is 300. If Apps in Guest Spaces are specified, all Apps specified in the request must belong to that Guest Space. Return Promise Sample code Get app deploy status sample Javascript var apps = [ YOUR_APP_ID // Another app id here ]; kintoneApp.getAppDeployStatus({apps}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const apps = [ YOUR_APP_ID // Another app id here ]; kintoneApp.getAppDeployStatus({apps}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"getAppDeployStatus(params)"},{"location":"reference/app/#getviewsparams","text":"Gets the View settings of a an App. Parameters Name Type Required Description params Object yes Get views params. params.app Integer yes The app ID params.lang String (optional) The language code. Support: DEFAULT: Default language setting of system JA: Japanese language setting ZH: Chinese language setting EN: English language setting params.isPreview Boolean (optional) Get the views with a pre-live settings . Return Promise Sample code Get views sample Javascript var app = YOUR_APP_ID; var lang = 'LANGUAGE_CODE'; // Ex: JA kintoneApp.getViews({app, lang}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); // Get a pre-live (preview) views var previewApp = YOUR_APP_ID; var previewLang = 'LANGUAGE_CODE'; // Ex: JA var isPreview = true; kintoneApp.getViews({app: previewApp, lang: previewLang, isPreview}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const lang = 'LANGUAGE_CODE'; // Ex: JA kintoneApp.getViews({app, lang}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); // Get a pre-live (preview) views const previewApp = YOUR_APP_ID; const previewLang = 'LANGUAGE_CODE'; // Ex: JA const isPreview = true; kintoneApp.getViews({app: previewApp, lang: previewLang, isPreview}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"getViews(params)"},{"location":"reference/app/#updateviewsparams","text":"Get field of form in kintone app Parameters Name Type Required Description params Object yes Params to update views. params.app Integer yes The app ID params.views JSONObject yes An object of data of Views. About the format, please look the sample below or reference at the end of this page params.revision Integer (optional) Specify the revision number of the settings that will be deployed. Return Promise Sample code Update views sample Javascript var app = YOUR_APP_ID; var views = { 'YOUR_VIEW_NAME': { 'index': 0, 'type': 'YOUR_VIEW_TYPE', // Default: 'LIST', 'CALENDAR', 'CUSTOM' 'name': 'YOUR_VIEW_NAME', 'fields': [ 'YOUR_FIELD_CODE' // Another field code here ], 'filterCond': 'YOUR_QUERY', 'sort': 'YOUR_SORT' } // Another view here }; var revision = 'YOUR_SETTINGS_REVISION'; kintoneApp.updateViews({app, views, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const views = { \"YOUR_VIEW_NAME\": { \"index\": 0, \"type\": \"YOUR_VIEW_TYPE\", // Default: 'LIST', 'CALENDAR', 'CUSTOM' \"name\": \"YOUR_VIEW_NAME\", \"fields\": [ \"YOUR_FIELD_CODE\" // Another field code here ], \"filterCond\": \"YOUR_QUERY\", \"sort\": \"YOUR_SORT\" } // Another view here }; const revision = 'YOUR_SETTINGS_REVISION'; kintoneApp.updateViews({app, views, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"updateViews(params)"},{"location":"reference/app/#getgeneralsettingsparams","text":"Gets the description, name, icon, revision and color theme of an App. Parameters Name Type Required Description params Object yes Get general settings params. params.app Integer yes The app ID params.lang String (optional) The language code. Support: DEFAULT: Default language setting of system JA: English language setting ZH: Chinese language setting EN: English language setting params.isPreview Boolean (optional) Get the general with a pre-live settings . Return Promise Sample code Get general settings sample Javascript var app = YOUR_APP_ID; var lang = 'LANGUAGE_CODE'; // Ex: JA kintoneApp.getGeneralSettings({app, lang}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); // Get a pre-live (preview) general settings var app = YOUR_APP_ID; var lang = 'LANGUAGE_CODE'; // Ex: JA var isPreview = true; kintoneApp.getGeneralSettings({app, lang, isPreview}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const lang = 'LANGUAGE_CODE'; // Ex: JA kintoneApp.getGeneralSettings({app, lang}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); // Get a pre-live (preview) general settings const app = YOUR_APP_ID; const lang = 'LANGUAGE_CODE'; // Ex: JA const isPreview = true; kintoneApp.getGeneralSettings({app, lang, isPreview}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"getGeneralSettings(params)"},{"location":"reference/app/#updategeneralsettingsparams","text":"Update the description, name, icon, revision and color theme of an App. Parameters Name Type Required Description params Object yes Params to update general settings. params.app Integer yes The app ID params.name String (Conditional) Name of an App. params.description String (Conditional) The description of an App. params.icon Icon (Conditional) The icon of an App. params.theme String (Conditional) Color theme of an App. params.revision Integer (optional) Specify the revision number of the settings that will be deployed. Return Promise Sample code Update general settings sample Javascript var params= { app: YOUR_APP_ID, name: 'YOUR_APP_NAME', description: 'YOUR_COOL_DESCRIPTION', icon: { type: 'YOUR_ICON_TYPE', // specified: FILE, PRESET key: 'YOUR_ICON_KEY' }, theme: 'YOUR_THEME', // specified: WHITE, RED, BLUE, GREEN, YELLOW, BLACK revision: 'YOUR_SETTINGS_REVISION' }; kintoneApp.updateGeneralSettings(params).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs var params= { app: YOUR_APP_ID, name: 'YOUR_APP_NAME', description: 'YOUR_COOL_DESCRIPTION', icon: { type: 'YOUR_ICON_TYPE', // specified: FILE, PRESET key: 'YOUR_ICON_KEY' }, theme: 'YOUR_THEME', // specified: WHITE, RED, BLUE, GREEN, YELLOW, BLACK revision: 'YOUR_SETTINGS_REVISION' }; kintoneApp.updateGeneralSettings(params).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"updateGeneralSettings(params)"},{"location":"reference/app/#getformfieldsparams","text":"Get field of form in kintone app Parameters Name Type Required Description params Object yes Get form fields params. params.app Integer yes The app ID params.lang String (optional) The language code. Support: DEFAULT: Default language setting of system JA: English language setting ZH: Chinese language setting EN: English language setting params.isPreview Boolean (optional) Get the app form fields with a pre-live settings . Return Promise Sample code Get app form field sample Javascript var app = YOUR_APP_ID; var lang = 'LANGUAGE_CODE'; // Ex: JA kintoneApp.getFormFields({app, lang}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); // Get a pre-live (preview) form fields var app = YOUR_APP_ID; var lang = 'LANGUAGE_CODE'; // Ex: JA var isPreview = true; kintoneApp.getFormFields({app, lang, isPreview}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const lang = 'LANGUAGE_CODE'; // Ex: JA kintoneApp.getFormFields({app, lang}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); // Get a pre-live (preview) form fields const app = YOUR_APP_ID; const lang = 'LANGUAGE_CODE'; // Ex: JA const isPreview = true; kintoneApp.getFormFields({app, lang, isPreview}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"getFormFields(params)"},{"location":"reference/app/#addformfieldsparams","text":"Adds fields to a form of an App. Warning After using this method, use the deployAppSettings to deploy the settings to the live App. Parameters Name Type Required Description params Object yes Params to add form fields. params.app Integer yes The app ID params.fields JSONObject yes The formFields which will add to form of kintone app. About the format, please look the sample below or reference at the end of this params.revision Integer (optional) Specify the revision number of the settings that will be deployed. Return Promise Sample code Add app form field sample Javascript var app = YOUR_APP_ID; var fields = { 'YOUR_FIELD_CODE': { 'type': 'SINGLE_LINE_TEXT', 'code': 'YOUR_FIELD_CODE', 'label': 'Text (single-line)', 'noLabel': false, 'required': true, 'unique': true } // Another field here }; var revision = 'YOUR_SETTINGS_REVISION'; kintoneApp.addFormFields({app, fields, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const fields = { 'YOUR_FIELD_CODE': { 'type': 'SINGLE_LINE_TEXT', 'code': 'YOUR_FIELD_CODE', 'label': 'Text (single-line)', 'noLabel': false, 'required': true, 'unique': true } // Another field here }; const revision = 'YOUR_SETTINGS_REVISION'; kintoneApp.addFormFields({app, fields, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"addFormFields(params)"},{"location":"reference/app/#updateformfieldsparams","text":"Updates the field settings of fields in a form of an App. Warning After using this method, use the deployAppSettings to deploy the settings to the live App. Parameters Name Type Required Description params Object yes Params to update form fields. params.app Integer yes The app ID params.fields JSONObject yes The formFields which will add to form of kintone app. About the format, please look the sample below or reference at the end of this params.revision Integer (optional) Specify the revision number of the settings that will be deployed. Return Promise Sample code Update app form field sample Javascript var app = YOUR_APP_ID; var fields = { 'YOUR_FIELD_CODE': { 'type': 'SINGLE_LINE_TEXT', 'code': 'YOUR_FIELD_CODE', 'label': 'Text (single-line)', 'noLabel': false, 'required': true, 'unique': true } // Another field here }; var revision = 'the_revision_of_the_settings '; kintoneApp.updateFormFields({app, fields, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const fields = { 'YOUR_FIELD_CODE': { 'type': 'SINGLE_LINE_TEXT', 'code': 'YOUR_FIELD_CODE', 'label': 'Text (single-line)', 'noLabel': false, 'required': true, 'unique': true } // Another field here }; const revision = 'YOUR_SETTINGS_REVISION'; kintoneApp.updateFormFields({app, fields, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"updateFormFields(params)"},{"location":"reference/app/#deleteformfieldsparams","text":"Updates the field settings of fields in a form of an App. Warning After using this method, use the deployAppSettings to deploy the settings to the live App. Parameters Name Type Required Description params Object yes Params to delete form fields. params.app Integer yes The app ID params.fields Array<String> yes The list of field codes of the fields to delete. Up to 100 field codes can be specified. params.revision Integer (optional) Specify the revision number of the settings that will be deployed. Return Promise Sample code Delete app form field sample Javascript var app = YOUR_APP_ID; var fields = [ 'YOUR_FIELD_CODE' // Another field code here ]; var revision = 'YOUR_SETTINGS_REVISION'; kintoneApp.deleteFormFields({app, fields, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const fields = [ 'YOUR_FIELD_CODE' // Another field code here ]; const revision = 'YOUR_SETTINGS_REVISION'; kintoneApp.deleteFormFields({app, fields, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"deleteFormFields(params)"},{"location":"reference/app/#getformlayoutparams","text":"Get layout of form in kintone app Parameters Name Type Required Description params Object yes Get form layout params. params.app Integer yes The kintone app id params.isPreview Boolean (optional) Get the app form layout with a pre-live settings . Return Promise Sample code Get form layout sample Javascript var app = YOUR_APP_ID; // Get form layout kintoneApp.getFormLayout({app}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); // Get a preview (pre-live) form layout var isPreview = true; kintoneApp.getFormLayout({app, isPreview}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; // Get form layout kintoneApp.getFormLayout({app}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); // Get a preview (pre-live) form layout const isPreview = true; kintoneApp.getFormLayout({app, isPreview}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"getFormLayout(params)"},{"location":"reference/app/#updateformlayoutparams","text":"Updates the field layout info of a form in an App. Warning After using this method, use the deployAppSettings to deploy the settings to the live App. Parameters Name Type Required Description params Object yes Params to update form layout. params.app Integer yes The kintone app id params.layout Array<JSONObject> yes A list of field layouts for each row. About the format, please look the sample below or reference at the end of this page. params.revision Integer (optional) Specify the revision number of the settings that will be deployed. The request will fail if the revision number is not the latest revision. Return Promise Sample code Update form layout sample Javascript var app = YOUR_APP_ID; var firstRowLayout = { 'type': 'YOUR_LAYOUT_TYPE', 'fields': [ { 'type': 'YOUR_FIELD_TYPE', 'code': 'YOUR_FIELD_CODE', 'size': { 'width': 'YOUR_FIELD_WIDTH' } } ] }; var layout = [ firstRowLayout // Another row layout here ]; var revision = 'YOUR_SETTINGS_REVISION'; // Update form layout kintoneApp.updateFormLayout({app, layout, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const fisrtRowLayout = { 'type': 'YOUR_LAYOUT_TYPE', 'fields': [ { 'type': 'YOUR_FIELD_TYPE', 'code': 'YOUR_FIELD_CODE', 'size': { 'width': 'YOUR_FIELD_WIDTH' } } ] }; const layout = [ fisrtRowLayout // Another row layout here ]; const revision = 'YOUR_SETTINGS_REVISION'; // Update form layout kintoneApp.updateFormLayout({app, layout, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"updateFormLayout(params)"},{"location":"reference/app/#reference","text":"Developer network's reference: Get App Get Apps Get Form fields Add Form Fields Update Form Fields Delete Form Fields Get Form Layout Deploy App Settings Get App Deploy Status Get Views Update Views Get General Settings Update General Settings Get Form Layout Update Form Layout","title":"Reference"},{"location":"reference/authentication/","text":"Authentication Authentication module will be used by Connection . This module allows authenticating with the Kintone app by: Password Authentication API token authentication Basic authenticator Warning If both the Token and Password Authentication are specified, the Token Authentication will be ignored and the Password authentication will be used. Constructor Parameters (none) Sample code Init authentication module Javascript var kintoneAuth = new kintoneJSSDK.Auth(); Nodejs const kintone = require('@kintone/kintone-js-sdk'); let kintoneAuth = new kintone.Auth(); Methods setPasswordAuth(params) Set password authentication for Authentication module. Parameters Name Type Required Description params Object yes The parameters that include username, password properties params.username String yes The username that is able to authenticate on kintone app params.password String yes The password that is able to authenticate on kintone app Return Auth Sample code Set password authentication Javascript var basicAuth = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; kintoneAuth.setPasswordAuth(basicAuth); Nodejs const basicAuth = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; kintoneAuth.setPasswordAuth(basicAuth); setApiToken(params) Set Api Token for Authentication module. Parameters Name Type Required Description params Object yes The parameters that includes apiToken property params.apiToken String yes The apiToken that is able to authenticate on kintone app Return Auth Set APIToken authentication Javascript var params = { apiToken: 'YOUR_TOKEN' }; kintoneAuth.setApiToken(params); Nodejs const params = { apiToken: 'YOUR_TOKEN' }; kintoneAuth.setApiToken(params); setBasicAuth(params) Set Basic authentication for Authentication module. Parameters Name Type Required Description params Object yes The parameters that includes username, password properties params.username String yes The username that is able to authenticate on kintone app params.password String yes The password that is able to authenticate on kintone app Return Auth Sample code Set basic authentication Javascript var basicAuth = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; kintoneAuth.setBasicAuth(basicAuth); Nodejs const basicAuth = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; kintoneAuth.setBasicAuth(basicAuth); setClientCert(params) Setting Authentication with the client certificate & password set. Parameters Name Type Required Description params Object yes The parameters that includes cert, password properties params.cert BinaryData yes Binary data of client certificate params.password String yes Password of client certificate Return Auth Sample code Set client certificate by binary data Nodejs const filePath = 'YOUR_CERT_PATH_FILE'; const params = { cert: fs.readFileSync(filePath), password: 'YOUR_CERT_FILE_PASSWORD' }; //set client cert by file content and password kintoneAuth.setClientCert(params); setClientCertByPath(params) Setting Authentication with the client certificate & password set by file path Parameters Name Type Required Description params Object yes The parameters that includes filePath, password properties params.filePath String yes File path to client certificate params.password String yes Password of client certificate Return Auth Sample code Set client certificate by path Nodejs const params = { filePath: 'YOUR_CERT_PATH_FILE', password: 'YOUR_CERT_FILE_PASSWORD' }; //set client cert by file path and password kintoneAuth.setClientCertByPath(params);","title":"Authentication"},{"location":"reference/authentication/#authentication","text":"Authentication module will be used by Connection . This module allows authenticating with the Kintone app by: Password Authentication API token authentication Basic authenticator Warning If both the Token and Password Authentication are specified, the Token Authentication will be ignored and the Password authentication will be used.","title":"Authentication"},{"location":"reference/authentication/#constructor","text":"Parameters (none) Sample code Init authentication module Javascript var kintoneAuth = new kintoneJSSDK.Auth(); Nodejs const kintone = require('@kintone/kintone-js-sdk'); let kintoneAuth = new kintone.Auth();","title":"Constructor"},{"location":"reference/authentication/#methods","text":"","title":"Methods"},{"location":"reference/authentication/#setpasswordauthparams","text":"Set password authentication for Authentication module. Parameters Name Type Required Description params Object yes The parameters that include username, password properties params.username String yes The username that is able to authenticate on kintone app params.password String yes The password that is able to authenticate on kintone app Return Auth Sample code Set password authentication Javascript var basicAuth = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; kintoneAuth.setPasswordAuth(basicAuth); Nodejs const basicAuth = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; kintoneAuth.setPasswordAuth(basicAuth);","title":"setPasswordAuth(params)"},{"location":"reference/authentication/#setapitokenparams","text":"Set Api Token for Authentication module. Parameters Name Type Required Description params Object yes The parameters that includes apiToken property params.apiToken String yes The apiToken that is able to authenticate on kintone app Return Auth Set APIToken authentication Javascript var params = { apiToken: 'YOUR_TOKEN' }; kintoneAuth.setApiToken(params); Nodejs const params = { apiToken: 'YOUR_TOKEN' }; kintoneAuth.setApiToken(params);","title":"setApiToken(params)"},{"location":"reference/authentication/#setbasicauthparams","text":"Set Basic authentication for Authentication module. Parameters Name Type Required Description params Object yes The parameters that includes username, password properties params.username String yes The username that is able to authenticate on kintone app params.password String yes The password that is able to authenticate on kintone app Return Auth Sample code Set basic authentication Javascript var basicAuth = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; kintoneAuth.setBasicAuth(basicAuth); Nodejs const basicAuth = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; kintoneAuth.setBasicAuth(basicAuth);","title":"setBasicAuth(params)"},{"location":"reference/authentication/#setclientcertparams","text":"Setting Authentication with the client certificate & password set. Parameters Name Type Required Description params Object yes The parameters that includes cert, password properties params.cert BinaryData yes Binary data of client certificate params.password String yes Password of client certificate Return Auth Sample code Set client certificate by binary data Nodejs const filePath = 'YOUR_CERT_PATH_FILE'; const params = { cert: fs.readFileSync(filePath), password: 'YOUR_CERT_FILE_PASSWORD' }; //set client cert by file content and password kintoneAuth.setClientCert(params);","title":"setClientCert(params)"},{"location":"reference/authentication/#setclientcertbypathparams","text":"Setting Authentication with the client certificate & password set by file path Parameters Name Type Required Description params Object yes The parameters that includes filePath, password properties params.filePath String yes File path to client certificate params.password String yes Password of client certificate Return Auth Sample code Set client certificate by path Nodejs const params = { filePath: 'YOUR_CERT_PATH_FILE', password: 'YOUR_CERT_FILE_PASSWORD' }; //set client cert by file path and password kintoneAuth.setClientCertByPath(params);","title":"setClientCertByPath(params)"},{"location":"reference/bulk-request/","text":"Bulk Request The Bulk Request API allows multiple API requests to run on multiple kintone apps. The below API can be used with the Bulk Request API: Add Record Add Records Update Record Update Records Delete Records Update Status Update Statuses Update Assignees Constructor Parameters Name Type Required Description params Object (conditional) Required for nodejs Constructor params. params.connection Connection (conditional) The connection module of this SDK. If initializing in browser environment on kintone, this parameter can be ommited to use session authentication. Sample code Init bulk request module Javascript (function(kintoneJSSDK) { 'use strict'; // with connection // Define Authentication object var kintoneAuth = new kintoneJSSDK.Auth(); var paramsAuth = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; kintoneAuth.setPasswordAuth(paramsAuth); var paramsConnection = { domain: 'YOUR_DOMAIN', auth: kintoneAuth }; var connection = new kintoneJSSDK.Connection(paramsConnection); // with connection var kintoneBulkRequest = new kintoneJSSDK.BulkRequest({connection}); // without connection, module will use session authentication of kintone var kintoneBulkRequest = new kintoneJSSDK.BulkRequest(); }(window.kintoneJSSDK)); Nodejs const kintone = require('@kintone/kintone-js-sdk'); const kintoneAuth = new kintone.Auth(); const paramsAuth = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; kintoneAuth.setPasswordAuth(paramsAuth); const paramsConnection = { domain: 'YOUR_DOMAIN', auth: kintoneAuth }; const connection = new kintone.Connection(paramsConnection); const kintoneBulkRequest = new kintone.BulkRequest({connection}); Methods All below methods (excluded execute() method) will add request to queue, you must execute the execute() function to get result of BulkRequest. addRecord({app, record}) Parameters See at Record - addRecord Return BulkRequest addRecords({app, records}) Parameters See at Record - addRecords Return BulkRequest updateRecordByID({app, id, record, revision}) Parameters See at Record - updateRecordByID Return BulkRequest updateRecordByUpdateKey({app, updateKey, record, revision}) Parameters See at Record - updateRecordByUpdateKey Return BulkRequest updateRecords({app, records}) Parameters See at Record - updateRecords Return BulkRequest deleteRecords({app, ids}) Parameters See at Record - deleteRecords Return BulkRequest deleteRecordsWithRevision({app, idsWithRevision}) Parameters See at Record - deleteRecordsWithRevision Return BulkRequest updateRecordAssignees({app, record, assignees, revision}) Parameters See at Record - updateRecordAssignees Return BulkRequest updateRecordStatus({app, id, action, assignee, revision}) Parameters See at Record - updateRecordStatus Return BulkRequest updateRecordsStatus({app, records}) Parameters See at Record - updateRecordsStatus Return BulkRequest execute() Execute the bulk request and get data response Parameters (none) Return [Promise] Sample code Execute bulk request Javascript var responseBulkRequest = kintoneBulkRequest .addRecord({/* [Args]*/}) .addRecords({/* [Args]*/}) .updateRecordByID({/* [Args]*/}) .updateRecordByUpdateKey({/* [Args]*/}) .updateRecords({/* [Args]*/}) .deleteRecords({/*[Args]*/}) .deleteRecordsWithRevision({/* [Args]*/}) .updateRecordAssignees({/* [Args]*/}) .updateRecordStatus({/* [Args]*/}) .updateRecordsStatus({/* [Args]*/}) .execute(); responseBulkRequest.then((resp) => { console.log(resp); }).catch((err) => { // The error will be an array if there are errors occur in addRecord, addRecords, updateRecords, updateRecords,deleteRecords... function if (Array.isArray(err)) { for (let i = 0; i < err.length; i++) { // Need to check the type of error because err array can have some empty object like: // [KintoneAPIException ,{},{},{},{}] if (err[i] instanceof kintoneJSSDK.KintoneAPIException) { console.log(err[i]); } } } // The error will be a KintoneAPIException if setting wrong Auth, Connection ... for BulkRequest else { console.log(err); } }); Nodejs const responseBulkRequest = kintoneBulkRequest .addRecord({/* [Args]*/}) .addRecords({/* [Args]*/}) .updateRecordByID({/* [Args]*/}) .updateRecordByUpdateKey({/* [Args]*/}) .updateRecords({/* [Args]*/}) .deleteRecords({/*[Args]*/}) .deleteRecordsWithRevision({/* [Args]*/}) .updateRecordAssignees({/* [Args]*/}) .updateRecordStatus({/* [Args]*/}) .updateRecordsStatus({/* [Args]*/}) .execute(); responseBulkRequest.then((resp) => { console.log(resp); }).catch((err) => { if (Array.isArray(err)) { // The error will be an array if there are errors occur in addRecord, addRecords, updateRecords, updateRecords,deleteRecords... function for (let i = 0; i < err.length; i++) { // Need to check the type of error because err array can have some empty object like: // [KintoneAPIException ,{},{},{},{}] if (err[i] instanceof kintone.KintoneAPIException) { console.log(err[i]); } } } else { // the error will be an element if setting wrong Auth, Connection ... for BulkRequest console.log(err); } }); Reference Bulk Request on developer network","title":"Bulk Request"},{"location":"reference/bulk-request/#bulk-request","text":"The Bulk Request API allows multiple API requests to run on multiple kintone apps. The below API can be used with the Bulk Request API: Add Record Add Records Update Record Update Records Delete Records Update Status Update Statuses Update Assignees","title":"Bulk Request"},{"location":"reference/bulk-request/#constructor","text":"Parameters Name Type Required Description params Object (conditional) Required for nodejs Constructor params. params.connection Connection (conditional) The connection module of this SDK. If initializing in browser environment on kintone, this parameter can be ommited to use session authentication. Sample code Init bulk request module Javascript (function(kintoneJSSDK) { 'use strict'; // with connection // Define Authentication object var kintoneAuth = new kintoneJSSDK.Auth(); var paramsAuth = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; kintoneAuth.setPasswordAuth(paramsAuth); var paramsConnection = { domain: 'YOUR_DOMAIN', auth: kintoneAuth }; var connection = new kintoneJSSDK.Connection(paramsConnection); // with connection var kintoneBulkRequest = new kintoneJSSDK.BulkRequest({connection}); // without connection, module will use session authentication of kintone var kintoneBulkRequest = new kintoneJSSDK.BulkRequest(); }(window.kintoneJSSDK)); Nodejs const kintone = require('@kintone/kintone-js-sdk'); const kintoneAuth = new kintone.Auth(); const paramsAuth = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; kintoneAuth.setPasswordAuth(paramsAuth); const paramsConnection = { domain: 'YOUR_DOMAIN', auth: kintoneAuth }; const connection = new kintone.Connection(paramsConnection); const kintoneBulkRequest = new kintone.BulkRequest({connection});","title":"Constructor"},{"location":"reference/bulk-request/#methods","text":"All below methods (excluded execute() method) will add request to queue, you must execute the execute() function to get result of BulkRequest.","title":"Methods"},{"location":"reference/bulk-request/#addrecordapp-record","text":"Parameters See at Record - addRecord Return BulkRequest","title":"addRecord({app, record})"},{"location":"reference/bulk-request/#addrecordsapp-records","text":"Parameters See at Record - addRecords Return BulkRequest","title":"addRecords({app, records})"},{"location":"reference/bulk-request/#updaterecordbyidapp-id-record-revision","text":"Parameters See at Record - updateRecordByID Return BulkRequest","title":"updateRecordByID({app, id, record, revision})"},{"location":"reference/bulk-request/#updaterecordbyupdatekeyapp-updatekey-record-revision","text":"Parameters See at Record - updateRecordByUpdateKey Return BulkRequest","title":"updateRecordByUpdateKey({app, updateKey, record, revision})"},{"location":"reference/bulk-request/#updaterecordsapp-records","text":"Parameters See at Record - updateRecords Return BulkRequest","title":"updateRecords({app, records})"},{"location":"reference/bulk-request/#deleterecordsapp-ids","text":"Parameters See at Record - deleteRecords Return BulkRequest","title":"deleteRecords({app, ids})"},{"location":"reference/bulk-request/#deleterecordswithrevisionapp-idswithrevision","text":"Parameters See at Record - deleteRecordsWithRevision Return BulkRequest","title":"deleteRecordsWithRevision({app, idsWithRevision})"},{"location":"reference/bulk-request/#updaterecordassigneesapp-record-assignees-revision","text":"Parameters See at Record - updateRecordAssignees Return BulkRequest","title":"updateRecordAssignees({app, record, assignees, revision})"},{"location":"reference/bulk-request/#updaterecordstatusapp-id-action-assignee-revision","text":"Parameters See at Record - updateRecordStatus Return BulkRequest","title":"updateRecordStatus({app, id, action, assignee, revision})"},{"location":"reference/bulk-request/#updaterecordsstatusapp-records","text":"Parameters See at Record - updateRecordsStatus Return BulkRequest","title":"updateRecordsStatus({app, records})"},{"location":"reference/bulk-request/#execute","text":"Execute the bulk request and get data response Parameters (none) Return [Promise] Sample code Execute bulk request Javascript var responseBulkRequest = kintoneBulkRequest .addRecord({/* [Args]*/}) .addRecords({/* [Args]*/}) .updateRecordByID({/* [Args]*/}) .updateRecordByUpdateKey({/* [Args]*/}) .updateRecords({/* [Args]*/}) .deleteRecords({/*[Args]*/}) .deleteRecordsWithRevision({/* [Args]*/}) .updateRecordAssignees({/* [Args]*/}) .updateRecordStatus({/* [Args]*/}) .updateRecordsStatus({/* [Args]*/}) .execute(); responseBulkRequest.then((resp) => { console.log(resp); }).catch((err) => { // The error will be an array if there are errors occur in addRecord, addRecords, updateRecords, updateRecords,deleteRecords... function if (Array.isArray(err)) { for (let i = 0; i < err.length; i++) { // Need to check the type of error because err array can have some empty object like: // [KintoneAPIException ,{},{},{},{}] if (err[i] instanceof kintoneJSSDK.KintoneAPIException) { console.log(err[i]); } } } // The error will be a KintoneAPIException if setting wrong Auth, Connection ... for BulkRequest else { console.log(err); } }); Nodejs const responseBulkRequest = kintoneBulkRequest .addRecord({/* [Args]*/}) .addRecords({/* [Args]*/}) .updateRecordByID({/* [Args]*/}) .updateRecordByUpdateKey({/* [Args]*/}) .updateRecords({/* [Args]*/}) .deleteRecords({/*[Args]*/}) .deleteRecordsWithRevision({/* [Args]*/}) .updateRecordAssignees({/* [Args]*/}) .updateRecordStatus({/* [Args]*/}) .updateRecordsStatus({/* [Args]*/}) .execute(); responseBulkRequest.then((resp) => { console.log(resp); }).catch((err) => { if (Array.isArray(err)) { // The error will be an array if there are errors occur in addRecord, addRecords, updateRecords, updateRecords,deleteRecords... function for (let i = 0; i < err.length; i++) { // Need to check the type of error because err array can have some empty object like: // [KintoneAPIException ,{},{},{},{}] if (err[i] instanceof kintone.KintoneAPIException) { console.log(err[i]); } } } else { // the error will be an element if setting wrong Auth, Connection ... for BulkRequest console.log(err); } });","title":"execute()"},{"location":"reference/bulk-request/#reference","text":"Bulk Request on developer network","title":"Reference"},{"location":"reference/connection/","text":"Connection Connection module is used to connect to kintone Rest API This module execute requests using axios Constructor Parameters Name Type Required Description params Object (conditional) The parameters that include domain, auth, guestSpaceID properties params.domain String (conditional) Required for nodejs The domain that is able to authenticate on kintone app params.auth Auth (conditional) Required for nodejs The authentication object. params.guestSpaceID Integer (optional) The guest space id. Use this parameter to connect to kintone guest space. Sample code Init Connection module Javascript // Define Authentication object var paramsAuth = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; var kintoneAuth = new kintoneJSSDK.Auth(); kintoneAuth.setPasswordAuth(paramsAuth); // Define connection that included auth var paramsConnection = { auth: kintoneAuth }; var kintoneConnectionWithAuthDemo = new kintoneJSSDK.Connection(paramsConnection); // Define connection that included guest space and auth var paramsConnection = { auth: kintoneAuth, guestSpaceID: GUEST_SPACE_ID }; var kintoneConnectionWithGuestSpaceAndAuthDemo = new kintoneJSSDK.Connection(paramsConnection); // Define connection without auth included guest space var paramsConnection = { guestSpaceID: GUEST_SPACE_ID }; var kintoneConnectionWithGuestSpaceDemo = new kintoneJSSDK.Connection(paramsConnection); Nodejs const kintone = require('@kintone/kintone-js-sdk'); // Define Authentication object const kintoneAuth = new kintone.Auth(); const paramsAuth = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; kintoneAuth.setPasswordAuth(paramsAuth); const paramsConnection = { domain: 'YOUR_DOMAIN', auth: kintoneAuth }; const kintoneConnection = new kintone.Connection(paramsConnection); // Define connection that included guest space const paramsConnection = { domain: 'YOUR_DOMAIN', auth: kintoneAuth, guestSpaceID: GUEST_SPACE_ID }; const kintoneConnectionWithGuestSpaceDemo = new kintone.Connection(paramsConnection); Methods setHeader(params) Set new header of the Connection Parameters Name Type Required Description params Object yes The parameters that include key, value properties params.key String yes The header's key name params.value String yes The header's value of key Return Connection Sample code Set header of the Connection Javascript var params = { key: 'YOUR_HEADER_KEY', value: 'YOUR_HEADER_VALUE' }; kintoneConnection.setHeader(params); Nodejs const params = { key: 'YOUR_HEADER_KEY', value: 'YOUR_HEADER_VALUE' }; kintoneConnection.setHeader(params); addRequestOption(params) Add option that supported by axios option Parameters Name Type Required Description params Object yes The parameters that include key, value properties params.key String yes The option's key name params.value String yes The option's value of key Return Connection Sample code Add request option of the Connection Javascript var params = { key: 'YOUR_OPTION_KEY', value: 'YOUR_OPTION_VALUE' }; kintoneConnection.addRequestOption(params); Nodejs const params = { key: 'YOUR_OPTION_KEY', value: 'YOUR_OPTION_VALUE' }; kintoneConnection.addRequestOption(params); setProxy(params) Set proxy for the connection module. This function is available on node.js environment only. On Browser environment, proxy settings are controlled by the Browser. Parameters Name Type Required Description params Object yes The parameters that include proxyHost, proxyPort, proxyUsername, proxyPassword properties params.proxyHost String yes The proxy host name params.proxyPort String yes The proxy port number params.proxyUsername String optional The username for proxy authentication. This parameter is required when proxy has authentication. params.proxyPassword String optional The proxy port number. This parameter is required when proxy has authentication. Return Connection Sample code Set proxy for the Connection Nodejs const params = { proxyHost: 'YOUR_PROXY_HOST', proxyPort: 'YOUR_PROXY_POST', proxyUsername: 'YOUR_PROXY_USER', proxyPassword: 'YOUR_PROXY_PASSWORD' }; kintoneConnection.setProxy(params); setHttpsProxy(params) Set SSL-secured proxy for the connection module. This function is available on node.js environment only. On Browser environment, proxy settings are controlled by the Browser. Parameters Name Type Required Description params Object yes The parameters that include proxyHost, proxyPort, proxyUsername, proxyPassword properties params.proxyHost String yes The proxy host name params.proxyPort String yes The proxy port number params.proxyUsername String optional The username for proxy authentication. This parameter is required when proxy has authentication. params.proxyPassword String optional The proxy port number. This parameter is required when proxy has authentication. Return Connection Sample code Set proxy for the Connection Nodejs const params = { proxyHost: 'YOUR_PROXY_HOST', proxyPort: 'YOUR_PROXY_POST', proxyUsername: 'YOUR_PROXY_USER', proxyPassword: 'YOUR_PROXY_PASSWORD' }; kintoneConnection.setHttpsProxy(params);","title":"Connection"},{"location":"reference/connection/#connection","text":"Connection module is used to connect to kintone Rest API This module execute requests using axios","title":"Connection"},{"location":"reference/connection/#constructor","text":"Parameters Name Type Required Description params Object (conditional) The parameters that include domain, auth, guestSpaceID properties params.domain String (conditional) Required for nodejs The domain that is able to authenticate on kintone app params.auth Auth (conditional) Required for nodejs The authentication object. params.guestSpaceID Integer (optional) The guest space id. Use this parameter to connect to kintone guest space. Sample code Init Connection module Javascript // Define Authentication object var paramsAuth = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; var kintoneAuth = new kintoneJSSDK.Auth(); kintoneAuth.setPasswordAuth(paramsAuth); // Define connection that included auth var paramsConnection = { auth: kintoneAuth }; var kintoneConnectionWithAuthDemo = new kintoneJSSDK.Connection(paramsConnection); // Define connection that included guest space and auth var paramsConnection = { auth: kintoneAuth, guestSpaceID: GUEST_SPACE_ID }; var kintoneConnectionWithGuestSpaceAndAuthDemo = new kintoneJSSDK.Connection(paramsConnection); // Define connection without auth included guest space var paramsConnection = { guestSpaceID: GUEST_SPACE_ID }; var kintoneConnectionWithGuestSpaceDemo = new kintoneJSSDK.Connection(paramsConnection); Nodejs const kintone = require('@kintone/kintone-js-sdk'); // Define Authentication object const kintoneAuth = new kintone.Auth(); const paramsAuth = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; kintoneAuth.setPasswordAuth(paramsAuth); const paramsConnection = { domain: 'YOUR_DOMAIN', auth: kintoneAuth }; const kintoneConnection = new kintone.Connection(paramsConnection); // Define connection that included guest space const paramsConnection = { domain: 'YOUR_DOMAIN', auth: kintoneAuth, guestSpaceID: GUEST_SPACE_ID }; const kintoneConnectionWithGuestSpaceDemo = new kintone.Connection(paramsConnection);","title":"Constructor"},{"location":"reference/connection/#methods","text":"","title":"Methods"},{"location":"reference/connection/#setheaderparams","text":"Set new header of the Connection Parameters Name Type Required Description params Object yes The parameters that include key, value properties params.key String yes The header's key name params.value String yes The header's value of key Return Connection Sample code Set header of the Connection Javascript var params = { key: 'YOUR_HEADER_KEY', value: 'YOUR_HEADER_VALUE' }; kintoneConnection.setHeader(params); Nodejs const params = { key: 'YOUR_HEADER_KEY', value: 'YOUR_HEADER_VALUE' }; kintoneConnection.setHeader(params);","title":"setHeader(params)"},{"location":"reference/connection/#addrequestoptionparams","text":"Add option that supported by axios option Parameters Name Type Required Description params Object yes The parameters that include key, value properties params.key String yes The option's key name params.value String yes The option's value of key Return Connection Sample code Add request option of the Connection Javascript var params = { key: 'YOUR_OPTION_KEY', value: 'YOUR_OPTION_VALUE' }; kintoneConnection.addRequestOption(params); Nodejs const params = { key: 'YOUR_OPTION_KEY', value: 'YOUR_OPTION_VALUE' }; kintoneConnection.addRequestOption(params);","title":"addRequestOption(params)"},{"location":"reference/connection/#setproxyparams","text":"Set proxy for the connection module. This function is available on node.js environment only. On Browser environment, proxy settings are controlled by the Browser. Parameters Name Type Required Description params Object yes The parameters that include proxyHost, proxyPort, proxyUsername, proxyPassword properties params.proxyHost String yes The proxy host name params.proxyPort String yes The proxy port number params.proxyUsername String optional The username for proxy authentication. This parameter is required when proxy has authentication. params.proxyPassword String optional The proxy port number. This parameter is required when proxy has authentication. Return Connection Sample code Set proxy for the Connection Nodejs const params = { proxyHost: 'YOUR_PROXY_HOST', proxyPort: 'YOUR_PROXY_POST', proxyUsername: 'YOUR_PROXY_USER', proxyPassword: 'YOUR_PROXY_PASSWORD' }; kintoneConnection.setProxy(params);","title":"setProxy(params)"},{"location":"reference/connection/#sethttpsproxyparams","text":"Set SSL-secured proxy for the connection module. This function is available on node.js environment only. On Browser environment, proxy settings are controlled by the Browser. Parameters Name Type Required Description params Object yes The parameters that include proxyHost, proxyPort, proxyUsername, proxyPassword properties params.proxyHost String yes The proxy host name params.proxyPort String yes The proxy port number params.proxyUsername String optional The username for proxy authentication. This parameter is required when proxy has authentication. params.proxyPassword String optional The proxy port number. This parameter is required when proxy has authentication. Return Connection Sample code Set proxy for the Connection Nodejs const params = { proxyHost: 'YOUR_PROXY_HOST', proxyPort: 'YOUR_PROXY_POST', proxyUsername: 'YOUR_PROXY_USER', proxyPassword: 'YOUR_PROXY_PASSWORD' }; kintoneConnection.setHttpsProxy(params);","title":"setHttpsProxy(params)"},{"location":"reference/file/","text":"File Download and upload file via kintone Rest API. Constructor Parameters Name Type Required Description params Object (conditional) Required for nodejs The parameters that include connection property params.connection Connection (conditional) The connection module of this SDK. If initializing in the browser environment on kintone, this parameter can be omitted to use session authentication. Sample code Init app sample Javascript (function(kintoneJSSDK) { 'use strict'; // with connection // Define Authentication object var kintoneAuth = new kintoneJSSDK.Auth(); var paramsAuth = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; kintoneAuth.setPasswordAuth(paramsAuth); var paramsConnection = { domain: 'YOUR_DOMAIN', auth: kintoneAuth }; var connection = new kintoneJSSDK.Connection(paramsConnection); var kintoneFile = new kintoneJSSDK.File({connection: connection}); // without connection, module will use session authentication of kintone var kintoneFile = new kintoneJSSDK.File(); // ... }(window.kintoneJSSDK)); Nodejs const kintone = require('@kintone/kintone-js-sdk'); const kintoneAuth = new kintone.Auth(); const paramsAuth = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; kintoneAuth.setPasswordAuth(paramsAuth); const paramsConnection = { domain: 'YOUR_DOMAIN', auth: kintoneAuth }; const connection = new kintone.Connection(paramsConnection); const kintoneFile = new kintone.File({connection: connection}); Methods upload(params) Upload file into kintone Parameters Name Type Required Description params Object yes The parameters that include fileName, fileBlob, fileContent, filePath properties params.filePath String (conditional) This parameter can only be used in nodejs environment The path of file to be uploaded. Required, if fileContent parameter is not specified. params.fileContent Stream (conditional) This parameter can only be used in Nodejs environment The content of file. Required, if filePath parameter is not specified. If filePath parameter is specified, this parameter will be ignored. params.fileBlob Blob yes This parameter can only be used in browser environment The content of file. params.fileName String (conditional) The name of file. Required, if either fileBlob or fileContent parameter is specified. Return Promise Sample code Upload file sample Javascript var params = { fileBlob: 'YOUR_FILE_BLOB', fileName: 'YOUR_FILE_NAME' }; kintoneFile.upload(params).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs // Using fileName, fileContent const params = { fileContent: fs.createReadStream('YOUR_FILE_PATH'), fileName: path.basename('YOUR_FILE_PATH') }; kintoneFile.upload(params).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); // Using filePath const param = { filePath: 'YOUR_FILE_PATH' }; kintoneFile.upload(param).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); download(params) Download file from kintone Parameters Name Type Required Description params Object yes The parameters that include fileKey, outPutFilePath properties params.fileKey String yes The file key of the uploaded file on kintone. params.outPutFilePath String yes This param only use for Nodejs The full path of output file on your environment Return Promise Sample code Get apps sample Javascript var params = { fileKey: 'YOUR_FILE_KEY' }; kintoneFile.download(params).then(rsp => { //file blob console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const params = { fileKey: 'YOUR_FILE_KEY', outPutFilePath: 'YOUR_OUTPUT_DIRECTORY' }; kintoneFile.download(params).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Reference Upload File on developer network Download File on developer network","title":"File"},{"location":"reference/file/#file","text":"Download and upload file via kintone Rest API.","title":"File"},{"location":"reference/file/#constructor","text":"Parameters Name Type Required Description params Object (conditional) Required for nodejs The parameters that include connection property params.connection Connection (conditional) The connection module of this SDK. If initializing in the browser environment on kintone, this parameter can be omitted to use session authentication. Sample code Init app sample Javascript (function(kintoneJSSDK) { 'use strict'; // with connection // Define Authentication object var kintoneAuth = new kintoneJSSDK.Auth(); var paramsAuth = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; kintoneAuth.setPasswordAuth(paramsAuth); var paramsConnection = { domain: 'YOUR_DOMAIN', auth: kintoneAuth }; var connection = new kintoneJSSDK.Connection(paramsConnection); var kintoneFile = new kintoneJSSDK.File({connection: connection}); // without connection, module will use session authentication of kintone var kintoneFile = new kintoneJSSDK.File(); // ... }(window.kintoneJSSDK)); Nodejs const kintone = require('@kintone/kintone-js-sdk'); const kintoneAuth = new kintone.Auth(); const paramsAuth = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; kintoneAuth.setPasswordAuth(paramsAuth); const paramsConnection = { domain: 'YOUR_DOMAIN', auth: kintoneAuth }; const connection = new kintone.Connection(paramsConnection); const kintoneFile = new kintone.File({connection: connection});","title":"Constructor"},{"location":"reference/file/#methods","text":"","title":"Methods"},{"location":"reference/file/#uploadparams","text":"Upload file into kintone Parameters Name Type Required Description params Object yes The parameters that include fileName, fileBlob, fileContent, filePath properties params.filePath String (conditional) This parameter can only be used in nodejs environment The path of file to be uploaded. Required, if fileContent parameter is not specified. params.fileContent Stream (conditional) This parameter can only be used in Nodejs environment The content of file. Required, if filePath parameter is not specified. If filePath parameter is specified, this parameter will be ignored. params.fileBlob Blob yes This parameter can only be used in browser environment The content of file. params.fileName String (conditional) The name of file. Required, if either fileBlob or fileContent parameter is specified. Return Promise Sample code Upload file sample Javascript var params = { fileBlob: 'YOUR_FILE_BLOB', fileName: 'YOUR_FILE_NAME' }; kintoneFile.upload(params).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs // Using fileName, fileContent const params = { fileContent: fs.createReadStream('YOUR_FILE_PATH'), fileName: path.basename('YOUR_FILE_PATH') }; kintoneFile.upload(params).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); // Using filePath const param = { filePath: 'YOUR_FILE_PATH' }; kintoneFile.upload(param).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"upload(params)"},{"location":"reference/file/#downloadparams","text":"Download file from kintone Parameters Name Type Required Description params Object yes The parameters that include fileKey, outPutFilePath properties params.fileKey String yes The file key of the uploaded file on kintone. params.outPutFilePath String yes This param only use for Nodejs The full path of output file on your environment Return Promise Sample code Get apps sample Javascript var params = { fileKey: 'YOUR_FILE_KEY' }; kintoneFile.download(params).then(rsp => { //file blob console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const params = { fileKey: 'YOUR_FILE_KEY', outPutFilePath: 'YOUR_OUTPUT_DIRECTORY' }; kintoneFile.download(params).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"download(params)"},{"location":"reference/file/#reference","text":"Upload File on developer network Download File on developer network","title":"Reference"},{"location":"reference/kintone-api-exception/","text":"kintoneAPIException Handle error responses from kintone Rest API Methods getHttpErrorCode() Parameters (none) Return Integer Sample code Get HTTP error code Javascript var appID = {your_invalid_app_id}; kintoneApp.getApp(appID).catch(function(err) { // This SDK return err with KintoneAPIExeption console.log(err.getHttpErrorCode()); }); Nodejs let appID = {your_invalid_app_id}; kintoneApp.getApp(appID).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.getHttpErrorCode()); }); getErrorResponse() Parameters (none) Return Error Response Sample code Get error response Javascript var appID = {your_invalid_app_id}; kintoneApp.getApp(appID).catch(function(err) { // This SDK return err with KintoneAPIExeption console.log(err.getErrorResponse()); }); Nodejs let appID = {your_invalid_app_id}; kintoneApp.getApp(appID).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.getErrorResponse()); }); get() Parameters (none) Return Error Response Sample code Get original error Javascript var appID = {your_invalid_app_id}; kintoneApp.getApp(appID).catch(function(err) { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs let appID = {your_invalid_app_id}; kintoneApp.getApp(appID).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); getOriginError() Parameters (none) Return Object Sample code Get original error Javascript var appID = {your_invalid_app_id}; kintoneApp.getApp(appID).catch(function(err) { // This SDK return err with KintoneAPIExeption console.log(err.getOriginError()); }); Nodejs let appID = {your_invalid_app_id}; kintoneApp.getApp(appID).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.getOriginError()); }); Reference kintone REST API Overview on developer network axios on npmjs","title":"Kintone API Exception"},{"location":"reference/kintone-api-exception/#kintoneapiexception","text":"Handle error responses from kintone Rest API","title":"kintoneAPIException"},{"location":"reference/kintone-api-exception/#methods","text":"","title":"Methods"},{"location":"reference/kintone-api-exception/#gethttperrorcode","text":"Parameters (none) Return Integer Sample code Get HTTP error code Javascript var appID = {your_invalid_app_id}; kintoneApp.getApp(appID).catch(function(err) { // This SDK return err with KintoneAPIExeption console.log(err.getHttpErrorCode()); }); Nodejs let appID = {your_invalid_app_id}; kintoneApp.getApp(appID).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.getHttpErrorCode()); });","title":"getHttpErrorCode()"},{"location":"reference/kintone-api-exception/#geterrorresponse","text":"Parameters (none) Return Error Response Sample code Get error response Javascript var appID = {your_invalid_app_id}; kintoneApp.getApp(appID).catch(function(err) { // This SDK return err with KintoneAPIExeption console.log(err.getErrorResponse()); }); Nodejs let appID = {your_invalid_app_id}; kintoneApp.getApp(appID).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.getErrorResponse()); });","title":"getErrorResponse()"},{"location":"reference/kintone-api-exception/#get","text":"Parameters (none) Return Error Response Sample code Get original error Javascript var appID = {your_invalid_app_id}; kintoneApp.getApp(appID).catch(function(err) { // This SDK return err with KintoneAPIExeption console.log(err.get()); }); Nodejs let appID = {your_invalid_app_id}; kintoneApp.getApp(appID).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.get()); });","title":"get()"},{"location":"reference/kintone-api-exception/#getoriginerror","text":"Parameters (none) Return Object Sample code Get original error Javascript var appID = {your_invalid_app_id}; kintoneApp.getApp(appID).catch(function(err) { // This SDK return err with KintoneAPIExeption console.log(err.getOriginError()); }); Nodejs let appID = {your_invalid_app_id}; kintoneApp.getApp(appID).catch((err) => { // This SDK return err with KintoneAPIExeption console.log(err.getOriginError()); });","title":"getOriginError()"},{"location":"reference/kintone-api-exception/#reference","text":"kintone REST API Overview on developer network axios on npmjs","title":"Reference"},{"location":"reference/record-cursor/","text":"Record Cursor Provide functions to work with kintone Cursor Currently, there's the only cursor for records. Constructor Parameters Name Type Required Description params Object (conditional) Required for nodejs Constructor params. params.connection Connection (conditional) The connection module of this SDK. If initializing in a browser environment on kintone, this parameter can be omitted to use session authentication. Sample code Init Record Cursor module Javascript (function(kintoneJSSDK) { 'use strict'; // with connection // Define Authentication object var kintoneAuth = new kintoneJSSDK.Auth(); var paramsAuth = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; kintoneAuth.setPasswordAuth(paramsAuth); var paramsConnection = { domain: 'YOUR_DOMAIN', auth: kintoneAuth }; var connection = new kintoneJSSDK.Connection(paramsConnection); // with connection var kintoneRC = new kintoneJSSDK.RecordCursor({connection}); // without connection, module will use session authentication of kintone var kintoneRC = new kintoneJSSDK.RecordCursor(); //... }(window.kintoneJSSDK)); Nodejs const kintone = require('@kintone/kintone-js-sdk'); const passwordAuthParam = { username: 'YOUR_USERNAME', password: 'YOUR_PASSWORD' }; const auth = new kintone.Auth(); auth.setPasswordAuth(passwordAuthParam); const connParam = { domain: 'YOUR_DOMAIN', auth: auth }; const kintoneConn = new kintone.Connection(connParam); const kintoneRC = new kintone.RecordCursor({connection: kintoneConn}); Methods createCursor(params) Create a cursor. Parameters Name Type Required Description params Object yes Create cursor params params.app Integer yes The kintone app ID params.fields Array<String> (optional) List of field codes you want in the response. params.query String (optional) The query string that will specify what records will be responded. params.size Integer (optional) Number of records to retrieve per request. Default: 100. Maximum: 500. Return Promise Sample code Create cursor Javascript var rcOption = { app: YOUR_APP_ID, fields: ['YOUR_FIELD_CODE'], query: 'YOUR_QUERY', size: YOUR_SIZE } kintoneRC.createCursor(rcOption).then(function(creatCursorResponse){ var myCursor = creatCursorResponse; console.log('Cursor ID: ' + myCursor.id ); console.log('Total Count: ' + myCursor.totalCount ); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const rcOption = { app: YOUR_APP_ID, fields: ['YOUR_FIELD_CODE'], query: 'YOUR_QUERY', size: YOUR_SIZE } kintoneRC.createCursor(rcOption).then(function(creatCursorResponse){ const myCursor = creatCursorResponse; console.log('Cursor ID: ' + myCursor.id ); console.log('Total Count: ' + myCursor.totalCount ); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); getRecords(params) Get one block of records. Parameters Name Type Required Description params Object yes Get records create params.id String yes Cursor ID Return Promise Sample code Get Records Once Javascript var rcOption = { app: YOUR_APP_ID, fields: ['YOUR_FIELD_CODE'], query: 'YOUR_QUERY', size: YOUR_SIZE } kintoneRC.createCursor(rcOption).then(function(creatCursorResponse){ var myCursor = creatCursorResponse; return kintoneRC.getRecords({id: myCursor.id}) }).then(function (getRecordsResponse) { console.log('Records result: '); console.log(getRecordsResponse); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const rcOption = { app: YOUR_APP_ID, fields: ['YOUR_FIELD_CODE'], query: 'YOUR_QUERY', size: YOUR_SIZE } kintoneRC.createCursor(rcOption).then(function(creatCursorResponse){ const myCursor = creatCursorResponse; return kintoneRC.getRecords({id: myCursor.id}) }).then(function (getRecordsResponse) { console.log('Records result: '); console.log(getRecordsResponse); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); getAllRecords(params) Get all records Parameters Name Type Required Description params Object yes Get all records param params.id String yes Cursor ID Return Promise Sample code Get All Records Javascript var rcOption = { app: YOUR_APP_ID, fields: ['YOUR_FIELD_CODE'], query: 'YOUR_QUERY', size: YOUR_SIZE } kintoneRC.createCursor(rcOption).then(function(creatCursorResponse){ var myCursor = creatCursorResponse; return kintoneRC.getAllRecords({id: myCursor.id}) }).then(function (getAllRecordsResponse) { console.log('All records result: '); console.log(getAllRecordsResponse); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const rcOption = { app: YOUR_APP_ID, fields: ['YOUR_FIELD_CODE'], query: 'YOUR_QUERY', size: YOUR_SIZE } kintoneRC.createCursor(rcOption).then(function(creatCursorResponse){ const myCursor = creatCursorResponse; return kintoneRC.getAllRecords({id: myCursor.id}) }).then(function (getAllRecordsResponse) { console.log('All records result: '); console.log(getAllRecordsResponse); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); deleteCursor(params) Delete a cursor Parameters Name Type Required Description params Object yes Delete cursor param params.id String yes Cursor ID Return None Sample code Delete Cursor Javascript var rcOption = { app: YOUR_APP_ID, fields: ['YOUR_FIELD_CODE'], query: 'YOUR_QUERY', size: YOUR_SIZE } kintoneRC.createCursor(rcOption).then(function(creatCursorResponse){ var myCursor = creatCursorResponse; return kintoneRC.deleteCursor({id: myCursor.id}) }).then(function (getAllRecordsResponse) { console.log('Cursor Deleted'); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const rcOption = { app: YOUR_APP_ID, fields: ['YOUR_FIELD_CODE'], query: 'YOUR_QUERY', size: YOUR_SIZE } kintoneRC.createCursor(rcOption).then(function(creatCursorResponse){ const myCursor = creatCursorResponse; return kintoneRC.deleteCursor({id: myCursor.id}) }).then(function (getAllRecordsResponse) { console.log('Cursor Deleted'); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"Record Cursor"},{"location":"reference/record-cursor/#record-cursor","text":"Provide functions to work with kintone Cursor Currently, there's the only cursor for records.","title":"Record Cursor"},{"location":"reference/record-cursor/#constructor","text":"Parameters Name Type Required Description params Object (conditional) Required for nodejs Constructor params. params.connection Connection (conditional) The connection module of this SDK. If initializing in a browser environment on kintone, this parameter can be omitted to use session authentication. Sample code Init Record Cursor module Javascript (function(kintoneJSSDK) { 'use strict'; // with connection // Define Authentication object var kintoneAuth = new kintoneJSSDK.Auth(); var paramsAuth = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; kintoneAuth.setPasswordAuth(paramsAuth); var paramsConnection = { domain: 'YOUR_DOMAIN', auth: kintoneAuth }; var connection = new kintoneJSSDK.Connection(paramsConnection); // with connection var kintoneRC = new kintoneJSSDK.RecordCursor({connection}); // without connection, module will use session authentication of kintone var kintoneRC = new kintoneJSSDK.RecordCursor(); //... }(window.kintoneJSSDK)); Nodejs const kintone = require('@kintone/kintone-js-sdk'); const passwordAuthParam = { username: 'YOUR_USERNAME', password: 'YOUR_PASSWORD' }; const auth = new kintone.Auth(); auth.setPasswordAuth(passwordAuthParam); const connParam = { domain: 'YOUR_DOMAIN', auth: auth }; const kintoneConn = new kintone.Connection(connParam); const kintoneRC = new kintone.RecordCursor({connection: kintoneConn});","title":"Constructor"},{"location":"reference/record-cursor/#methods","text":"","title":"Methods"},{"location":"reference/record-cursor/#createcursorparams","text":"Create a cursor. Parameters Name Type Required Description params Object yes Create cursor params params.app Integer yes The kintone app ID params.fields Array<String> (optional) List of field codes you want in the response. params.query String (optional) The query string that will specify what records will be responded. params.size Integer (optional) Number of records to retrieve per request. Default: 100. Maximum: 500. Return Promise Sample code Create cursor Javascript var rcOption = { app: YOUR_APP_ID, fields: ['YOUR_FIELD_CODE'], query: 'YOUR_QUERY', size: YOUR_SIZE } kintoneRC.createCursor(rcOption).then(function(creatCursorResponse){ var myCursor = creatCursorResponse; console.log('Cursor ID: ' + myCursor.id ); console.log('Total Count: ' + myCursor.totalCount ); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const rcOption = { app: YOUR_APP_ID, fields: ['YOUR_FIELD_CODE'], query: 'YOUR_QUERY', size: YOUR_SIZE } kintoneRC.createCursor(rcOption).then(function(creatCursorResponse){ const myCursor = creatCursorResponse; console.log('Cursor ID: ' + myCursor.id ); console.log('Total Count: ' + myCursor.totalCount ); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"createCursor(params)"},{"location":"reference/record-cursor/#getrecordsparams","text":"Get one block of records. Parameters Name Type Required Description params Object yes Get records create params.id String yes Cursor ID Return Promise Sample code Get Records Once Javascript var rcOption = { app: YOUR_APP_ID, fields: ['YOUR_FIELD_CODE'], query: 'YOUR_QUERY', size: YOUR_SIZE } kintoneRC.createCursor(rcOption).then(function(creatCursorResponse){ var myCursor = creatCursorResponse; return kintoneRC.getRecords({id: myCursor.id}) }).then(function (getRecordsResponse) { console.log('Records result: '); console.log(getRecordsResponse); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const rcOption = { app: YOUR_APP_ID, fields: ['YOUR_FIELD_CODE'], query: 'YOUR_QUERY', size: YOUR_SIZE } kintoneRC.createCursor(rcOption).then(function(creatCursorResponse){ const myCursor = creatCursorResponse; return kintoneRC.getRecords({id: myCursor.id}) }).then(function (getRecordsResponse) { console.log('Records result: '); console.log(getRecordsResponse); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"getRecords(params)"},{"location":"reference/record-cursor/#getallrecordsparams","text":"Get all records Parameters Name Type Required Description params Object yes Get all records param params.id String yes Cursor ID Return Promise Sample code Get All Records Javascript var rcOption = { app: YOUR_APP_ID, fields: ['YOUR_FIELD_CODE'], query: 'YOUR_QUERY', size: YOUR_SIZE } kintoneRC.createCursor(rcOption).then(function(creatCursorResponse){ var myCursor = creatCursorResponse; return kintoneRC.getAllRecords({id: myCursor.id}) }).then(function (getAllRecordsResponse) { console.log('All records result: '); console.log(getAllRecordsResponse); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const rcOption = { app: YOUR_APP_ID, fields: ['YOUR_FIELD_CODE'], query: 'YOUR_QUERY', size: YOUR_SIZE } kintoneRC.createCursor(rcOption).then(function(creatCursorResponse){ const myCursor = creatCursorResponse; return kintoneRC.getAllRecords({id: myCursor.id}) }).then(function (getAllRecordsResponse) { console.log('All records result: '); console.log(getAllRecordsResponse); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"getAllRecords(params)"},{"location":"reference/record-cursor/#deletecursorparams","text":"Delete a cursor Parameters Name Type Required Description params Object yes Delete cursor param params.id String yes Cursor ID Return None Sample code Delete Cursor Javascript var rcOption = { app: YOUR_APP_ID, fields: ['YOUR_FIELD_CODE'], query: 'YOUR_QUERY', size: YOUR_SIZE } kintoneRC.createCursor(rcOption).then(function(creatCursorResponse){ var myCursor = creatCursorResponse; return kintoneRC.deleteCursor({id: myCursor.id}) }).then(function (getAllRecordsResponse) { console.log('Cursor Deleted'); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const rcOption = { app: YOUR_APP_ID, fields: ['YOUR_FIELD_CODE'], query: 'YOUR_QUERY', size: YOUR_SIZE } kintoneRC.createCursor(rcOption).then(function(creatCursorResponse){ const myCursor = creatCursorResponse; return kintoneRC.deleteCursor({id: myCursor.id}) }).then(function (getAllRecordsResponse) { console.log('Cursor Deleted'); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"deleteCursor(params)"},{"location":"reference/record/","text":"Record Provide manipulate functions on records: get, update, delete, update the record status & assignees in the kintone app Constructor Parameters Name Type Required Description params Object (conditional) Required for nodejs Constructor params. params.connection Connection (conditional) The connection module of this SDK. If initializing in a browser environment on kintone, this parameter can be omitted to use session authentication. Sample code Init record module Javascript (function(kintoneJSSDK) { 'use strict'; // with connection // Define Authentication object var kintoneAuth = new kintoneJSSDK.Auth(); var paramsAuth = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; kintoneAuth.setPasswordAuth(paramsAuth); var paramsConnection = { domain: 'YOUR_DOMAIN', auth: kintoneAuth }; var connection = new kintoneJSSDK.Connection(paramsConnection); var kintoneRecord = new kintoneJSSDK.Record({connection}); // without connection, module will use session authentication of kintone var kintoneRecord = new kintoneJSSDK.Record(); }(window.kintoneJSSDK)); Nodejs const kintone = require('@kintone/kintone-js-sdk'); const kintoneAuth = new kintone.Auth(); const paramsAuth = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; kintoneAuth.setPasswordAuth(paramsAuth); const paramsConnection = { domain: 'YOUR_DOMAIN', auth: kintoneAuth }; const connection = new kintone.Connection(paramsConnection); const kintoneRecord = new kintone.Record({connection}); Methods getRecord(params) Retrieves details of 1 record from an app. Parameters Name Type Required Description params Object yes Get record params params.app Integer yes The kintone app ID params.id Integer yes The record ID in kintone app Return Promise Sample code Get record Javascript var app = YOUR_APP_ID; var id = YOUR_RECORD_ID; kintoneRecord.getRecord({app, id}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const id = YOUR_RECORD_ID; kintoneRecord.getRecord({app, id}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); getRecords(params) Retrieves details of multiple records from an app using a query string. Parameters Name Type Required Description params Object yes Get records params params.app Integer yes The kintone app ID params.query String (optional) The query string that will specify what records will be responded. params.fields Array<String> (optional) List of field codes you want in the response. params.totalCount Boolean (optional) If \"true\", the request will retrieve the total count of records match with query conditions. Return Promise Sample code Get records Javascript var app = YOUR_APP_ID; var query = 'YOUR_QUERY_STRING'; var fields = [ 'YOUR_FIELD_CODE', // another fieldCode ] var totalCount = 'YOUR_DECIDE_TRUE_OR_FALSE'; kintoneRecord.getRecords({app, query, fields, totalCount}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const query = 'YOUR_QUERY_STRING'; const fields = [ 'YOUR_FIELD_CODE', // another fieldCode ] const totalCount = 'YOUR_DECIDE_TRUE_OR_FALSE'; kintoneRecord.getRecords({app, query, fields, totalCount}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); getAllRecordsByQuery(params) Retrieves details of all records from an app using a query string. Number of records can be retrieved at once is greater than the default limitations Parameters Name Type Required Description params Object yes Get records by query params params.app Integer yes The kintone app ID params.query String (optional) The query string that will specify what records will be responded. params.fields Array<String> (optional) List of field codes you want in the response. params.totalCount Boolean (optional) If \"true\", the request will retrieve the total count of records match with query conditions. params.seek Boolean (optional) Default value is \"false\". \u30fbfalse\uff1ausing offset method You can get all records within the limits of offset.(\u203b Around July 2020, cybozu plan to set an offset upper limit of 10,000 ) You can not specify \"offset\" and \"limit\" clause on the query when you use offset method because these clauses are already used internally. \u30fbtrue\uff1ausing seek method You get all records(over limitation of offset) in order by record ID. But you can not specify \"order by\", \"offset\" and \"limit\" clause on the query when you use seek method because these clauses are already used internally. usage about offset and seek method \u30fbusage about offset method and seek method(ja) \u30fbinfo about offset method(us) \u30fbinfo about seek method(us) Return Promise Sample code Get all records by the query without limitation Javascript var app = YOUR_APP_ID; var query = 'YOUR_QUERY_STRING'; var fields = [ 'YOUR_FIELD_CODE', // another fieldCode ] var totalCount = 'YOUR_DECIDE_TRUE_OR_FALSE'; var seek = 'YOUR_DECIDE_TRUE_OR_FALSE'; kintoneRecord.getAllRecordsByQuery({app, query, fields, totalCount, seek}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const query = 'YOUR_QUERY_STRING'; const fields = [ 'YOUR_FIELD_CODE', // another fieldCode ] const totalCount = 'YOUR_DECIDE_TRUE_OR_FALSE'; const seek = 'YOUR_DECIDE_TRUE_OR_FALSE'; kintoneRecord.getAllRecordsByQuery({app, query, fields, totalCount, seek}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); getAllRecordsByCursor(params) Retrieves details of all records from an app using a query string. Can't indicate limit and offset of the query. Number of records can be retrieved at once is greater than the default limitations Parameters Name Type Required Description params Object yes Params to get all record by cursor params.app Integer yes The kintone app ID params.query String (optional) The query string that will specify what records will be responded. option.fields Array<String> (optional) List of field codes you want in the response. Return Promise Sample code Get all records by cursor Javascript var rcOption = { app: YOUR_APP_ID, fields: [ 'YOUR_FIELD_CODE', // another fieldCode ], query: 'YOUR_QUERY_STRING' }; kintoneRecord.getAllRecordsByCursor(rcOption).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const rcOption = { app: YOUR_APP_ID, fields: [ 'YOUR_FIELD_CODE', // another fieldCode ], query: 'YOUR_QUERY_STRING' }; kintoneRecord.getAllRecordsByCursor(rcOption).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); addRecord(params) Add one record to an app. Parameters Name Type Required Description params Object yes Params to add record params.app Integer yes The kintone app ID params.record JSONObject (optional) The record data to be added to kintone app. About the format, please look at the sample below or reference at the end of this page Return Promise Sample code Add record Javascript var app = YOUR_APP_ID; var record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; kintoneRecord.addRecord({app, record}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; kintoneRecord.addRecord({app, record}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); addRecords(params) Add multiple records to an app. Can insert upto 100 record to kintone app. Parameters Name Type Required Description params Object yes Params to add records params.app Integer yes The kintone app ID params.records Array<JSONObject> yes List of records data to be added to kintone app. About the format, please look at the sample below or reference at the end of this page. Return Promise Sample code Add multiple records Javascript var app = YOUR_APP_ID; var record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; var records = [ record, // another record ]; kintoneRecord.addRecords({app, records}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; const records = [ record // another record ]; kintoneRecord.addRecords({app, records}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); addAllRecords(params) Add multiple records to an app. Can insert unlimited number of records to kintone app, rollback can be performed on each block of 2000 records. Parameters Name Type Required Description params Object yes Params to add all record params.app Integer yes The kintone app ID params.records Array<JSONObject> yes List of records data to be added to kintone app. About the format, please look at the sample below or reference at the end of this page. Return Promise Sample code Add all records without limitation Javascript var app = YOUR_APP_ID; var record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; var records = [ record, // another record ]; kintoneRecord.addAllRecords({app, records}).then((rsp) => { console.log(rsp); }).catch((err) => { // Ex: User update 6000 records: // Case 1: the error occurs in record 0 // err response // { // results: [KintoneAPIException, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},{}] // } // Case 2: the error occurs in record 4000 // err response // { // results: [ // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // KintoneAPIException, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {} // ] // } console.log(err) }); Nodejs const app = YOUR_APP_ID; const record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; const records = [ record // another record ]; kintoneRecord.addAllRecords({app, records}).then((rsp) => { console.log(rsp); }).catch((err) => { // Ex: User update 6000 records: // Case 1: the error occurs in record 0 // err response // { // results: [KintoneAPIException, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},{}] // } // Case 2: the error occurs in record 4000 // err response // { // results: [ // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // KintoneAPIException, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {} // ] // } console.log(err) }); updateRecordByID(params) Updates details of 1 record in an app by specifying its record number. Parameters Name Type Required Description params Object yes Params to update record by id params.app Integer yes The kintone app ID params.id Integer yes The record ID on kintone app params.record JSONObject (optional) The record data to be updated in kintone app. About the format, please look at the sample below or reference at the end of this page. params.revision Integer (optional) The revision number of record Return Promise Sample code Update record by ID Javascript var app = YOUR_APP_ID; var id = YOUR_RECORD_ID; var record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; var revision = REVISION_OF_RECORD; kintoneRecord.updateRecordByID({app, id, record, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const id = YOUR_RECORD_ID; const record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; const revision = REVISION_OF_RECORD; kintoneRecord.updateRecordByID({app, id, record, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); updateRecordByUpdateKey(params) Updates details of 1 record in an app by a unique key. Parameters Name Type Required Description params Object yes Params to update record by update key params.app Integer yes The kintone app ID params.updateKey JSONObject yes The unique key of the record to be updated. About the format, please look at the sample below or reference at the end of this page. params.record JSONObject (optional) The record data will be updated to kintone app. About the format, please look at the sample below or reference at the end of this page. params.revision Integer (optional) The revision number of record Return Promise Sample code Update record by UpdateKey Javascript var app = YOUR_APP_ID; var updateKey = { field: 'YOUR_FIELD_CODE', value: 'YOUR_FIELD_CODE_VALUE' }; var record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; var revision = REVISION_OF_RECORD; kintoneRecord.updateRecordByUpdateKey({app, updateKey, record, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const updateKey = { field: 'YOUR_FIELD_CODE', value: 'YOUR_FIELD_CODE_VALUE' }; const record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; const revision = REVISION_OF_RECORD; kintoneRecord.updateRecordByUpdateKey({app, updateKey, record, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); updateRecords(params) Updates details of multiple records in an app, by specifying their record number, or a different unique key. Can update upto 100 records to kintone app. Parameters Name Type Required Description params Object yes Params to update records params.app Integer yes The kintone app ID params.records Array<JSONObject> (optional) The record data will be updated to kintone app. About the format, please look at the sample below or reference at the end of this page. Return Promise Sample code Update multiple records Javascript var app = YOUR_APP_ID; var record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; // This object can not have both \"id\" and \"updateKey\" keys at the same time. var recordUpdate = { // Required, if updateKey will not be specified. id: YOUR_RECORD_ID, // Required, if id will not be specified. updateKey: { field: 'YOUR_FIELD_CODE', value: 'YOUR_FIELD_CODE_VALUE' }, record: record, revision: RECORD_REVISION_NUMBER }; var records= [ recordUpdate, // Another recordUpdate ] kintoneRecord.updateRecords({app, records}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; // This object can not have both \"id\" and \"updateKey\" keys at the same time. const recordUpdate = { // Required, if updateKey will not be specified. id: YOUR_RECORD_ID, // Required, if id will not be specified. updateKey: { field: 'YOUR_FIELD_CODE', value: 'YOUR_FIELD_CODE_VALUE' }, record: record, revision: RECORD_REVISION_NUMBER }; const records = [ recordUpdate, // Another recordUpdate ] kintoneRecord.updateRecords({app, records}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); updateAllRecords(params) Updates details of multiple records in an app, by specifying their record number, or a different unique key. Can update unlimited number of records to kintone app, rollback can be performed on each block of 2000 records. Parameters Name Type Required Description params Object yes Params to update all records params.app Integer yes The kintone app ID params.records Array<JSONObject> yes The record data will be updated to kintone app. About the format, please look at the sample below or reference at the end of this page. Return Promise Sample code Update all records without limitation Javascript var app = YOUR_APP_ID; var record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; // This object can not have both \"id\" and \"updateKey\" keys at the same time. var recordUpdate = { // Required, if updateKey will not be specified. id: YOUR_RECORD_ID, // Required, if id will not be specified. updateKey: { field: 'YOUR_FIELD_CODE', value: 'YOUR_FIELD_CODE_VALUE' }, record: record, revision: RECORD_REVISION_NUMBER }; var records = [ recordUpdate, // Another recordUpdate ] kintoneRecord.updateAllRecords({app, records}).then((rsp) => { console.log(rsp); }).catch((err) => { // Ex: User update 6000 records: // Case 1: the error occurs in record 0 // err response // { // results: [KintoneAPIException, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},{}] // } // Case 2: the error occurs in record 4000 // err response // { // results: [ // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // KintoneAPIException, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {} // ] // } console.log(err) }); Nodejs const app = YOUR_APP_ID; const record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; // This object can not have both \"id\" and \"updateKey\" keys at the same time. const recordUpdate = { // Required, if updateKey will not be specified. id: YOUR_RECORD_ID, // Required, if id will not be specified. updateKey: { field: 'YOUR_FIELD_CODE', value: 'YOUR_FIELD_CODE_VALUE' }, record: record, revision: RECORD_REVISION_NUMBER }; const records = [ recordUpdate, // Another recordUpdate ] kintoneRecord.updateAllRecords({app, records}).then((rsp) => { console.log(rsp); }).catch((err) => { // Ex: User update 6000 records: // Case 1: the error occurs in record 0 // err response // { // results: [KintoneAPIException, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},{}] // } // Case 2: the error occurs in record 4000 // err response // { // results: [ // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // KintoneAPIException, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {} // ] // } console.log(err) }); deleteRecords(params) Delete multiple records in an app. Can delete upto 100 records to kintone app. Parameters Name Type Required Description params Object yes Params to delete records params.app Integer yes The kintone app ID params.ids Array<Integer> yes The list ids of record will be delete. Return None Sample code Delete multi record Javascript var app = YOUR_APP_ID; var ids = [YOUR_RECORD_ID] kintoneRecord.deleteRecords({app, ids}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const ids = [YOUR_RECORD_ID] kintoneRecord.deleteRecords({app, ids}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); deleteRecordsWithRevision(params) Delete multiple records in an app with revision. Parameters Name Type Required Description params Object yes Params to delete record with revision params.app Integer yes The kintone app ID params.idsWithRevision JSONObject yes JSONObject format by HashTable< Integer , Integer > ( key : The Id of record , value : The Revision of record. ) Return None Sample code Delete record with revision Javascript var app = YOUR_APP_ID; var idsWithRevision = { YOUR_RECORD_ID: REVISION_OF_RECORD } kintoneRecord.deleteRecordsWithRevision({app, idsWithRevision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const idsWithRevision = { YOUR_RECORD_ID: REVISION_OF_RECORD } kintoneRecord.deleteRecordsWithRevision({app, idsWithRevision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); deleteAllRecordsByQuery(params) Deletes all records in an app by query string Can delete unlimited number of records to kintone app, rollback can be performed on each block of 2000 records. Parameters Name Type Required Description params Object yes Delete all records by query params.app Integer yes The kintone app ID params.query String (optional) The query string that will specify what records will be responded. The query parameter can't indicate limit and offset. Return Promise Sample code Delete all records by query string Javascript var app = YOUR_APP_ID; var query = 'YOUR_QUERY_STRING'; kintoneRecord.deleteAllRecordsByQuery({app, query}).then((rsp) => { console.log(rsp); }) .catch((err) => { // Ex: User update 6000 records: // Case 1: the error occurs in record 0 // err response // { // results: [KintoneAPIException, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},{}] // } // Case 2: the error occurs in record 4000 // err response // { // results: [ // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // KintoneAPIException, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {} // ] // } console.log(err) }); Nodejs const app = YOUR_APP_ID; const query = 'YOUR_QUERY_STRING'; kintoneRecord.deleteAllRecordsByQuery({app, query}).then((rsp) => { console.log(rsp); }) .catch((err) => { // Ex: User update 6000 records: // Case 1: the error occurs in record 0 // err response // { // results: [KintoneAPIException, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},{}] // } // Case 2: the error occurs in record 4000 // err response // { // results: [ // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // KintoneAPIException, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {} // ] // } console.log(err) }); upsertRecord(params) Insert or update a record to kintone app. Insert the record if the updateKey doesn't exist and update the record if the updateKey exists. Parameters Name Type Required Description params Object yes Params to upsert record params.app Integer yes The kintone app ID params.updateKey JSONObject yes The unique key of the record to be updated. About the format, please look at the sample below or reference at the end of this page. params.record JSONObject yes The record data will be added to kintone app. About the format, please look at the sample below or reference at the end of this page. params.revision Integer (optional) The revision number of record Return Promise Sample code Upsert record by UpdateKey Javascript var app = YOUR_APP_ID; var updateKey = { field: 'YOUR_FIELD_CODE', value: 'YOUR_FIELD_CODE_VALUE' }; var record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; var revision = REVISION_OF_RECORD; kintoneRecord.upsertRecord({app, updateKey, record, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const updateKey = { field: 'YOUR_FIELD_CODE', value: 'YOUR_FIELD_CODE_VALUE' }; const record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; const revision = REVISION_OF_RECORD; kintoneRecord.upsertRecord({app, updateKey, record, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); upsertRecords(params) Insert or update up to 1500 records to kintone app. If the records are over 1500, It is thrown Error. Insert the records if the updateKey doesn't exist and update the records if the updateKey exists. Parameters Name Type Required Description params Object yes Params to upsert records params.app Integer yes The kintone app ID params.records Array<JSONObject> yes The record data Array which has updateKey and record. About the format, please look at the sample below or reference at the end of this page. Return Promise Sample code Upsert records by UpdateKey Javascript var app = YOUR_APP_ID; var records = [ { updateKey: { field: 'YOUR_FIELD_CODE', value: 'YOUR_FIELD_CODE_VALUE_1' }, record: { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE 1' }, } }, { updateKey: { field: 'YOUR_FIELD_CODE', value: 'YOUR_FIELD_CODE_VALUE_2' }, record: { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE 2' }, } }, { updateKey: { field: 'YOUR_FIELD_CODE', value: 'YOUR_FIELD_CODE_VALUE_3' }, record: { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE 3' }, } } ]; kintoneRecord.upsertRecords({app, records}).then((resp) => { console.log(resp); }).catch((err) => { /// Ex: User upsert over 100 records: // Case 1: the error occurs on a first record // err response // { // results: [KintoneAPIException, {},...] // } // Case 2: the error occurs on the 100th or more record // err response // { // results: [{},..., KintoneAPIException, {},...] // } console.log(err); }); Nodejs const app = YOUR_APP_ID; const records = [ { updateKey: { field: 'YOUR_FIELD_CODE', value: 'YOUR_FIELD_CODE_VALUE_1' }, record: { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE 1' }, } }, { updateKey: { field: 'YOUR_FIELD_CODE', value: 'YOUR_FIELD_CODE_VALUE_2' }, record: { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE 2' }, } }, { updateKey: { field: 'YOUR_FIELD_CODE', value: 'YOUR_FIELD_CODE_VALUE_3' }, record: { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE 3' }, } } ]; kintoneRecord.upsertRecords({app, records}).then((resp) => { console.log(resp); }).catch((err) => { /// Ex: User upsert over 100 records: // Case 1: the error occurs on a first record // err response // { // results: [KintoneAPIException, {},...] // } // Case 2: the error occurs on the 100th or more record // err response // { // results: [{},..., KintoneAPIException, {},...] // } console.log(err); }); updateRecordAssignees(params) Update assignees of a record. Parameters Name Type Required Description params Object yes Params to update record assignees params.app Integer yes The kintone app ID params.id Integer yes The record ID of kintone app params.assignees Array<String> yes The user codes of the assignees params.revision Integer (optional) The revision number of record Return Promise Sample code update record Assignees Javascript var app = YOUR_APP_ID; var id = YOUR_RECORD_ID; var assignees = ['YOUR_ASSIGNEE']; var revision = REVISION_OF_RECORD; kintoneRecord.updateRecordAssignees({app, id, assignees, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const id = YOUR_RECORD_ID; const assignees = ['YOUR_ASSIGNEE']; const revision = REVISION_OF_RECORD; kintoneRecord.updateRecordAssignees({app, id, assignees, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); updateRecordStatus(params) Updates the Status of a record of an app. Parameters Name Type Required Description params Object yes Params to update record status params.app Integer yes The kintone app ID. params.id Integer yes The record ID on kintone app. params.action String yes The Action name will be run. params.assignee String (conditional) The next Assignee. Specify the Assignee's login name. Required, if the \"Assignee List\" of the current status is set to \"User chooses one assignee from the list to take action\", and a selectable assignee exists. params.revision Integer (optional) The revision of record Return Promise Sample code Update record status Javascript var app = YOUR_APP_ID; var id = YOUR_RECORD_ID; var action = 'YOUR_ACTION_NAME'; var assignee = 'YOUR_ASSIGNEE'; var revision = REVISION_OF_RECORD; kintoneRecord.updateRecordStatus({app, id, action, assignee, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const id = YOUR_RECORD_ID; const action = YOUR_ACTION_NAME; const assignee = 'YOUR_ASSIGNEE'; const revision = REVISION_OF_RECORD; kintoneRecord.updateRecordStatus({app, id, action, assignee, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); updateRecordsStatus(params) Updates the Status of multiple records of an app. Parameters Name Type Required Description params Object yes Params to update records status params.app Integer yes The kintone app ID params.records Array<JSONObject> yes The record status data. See the below sample codes and reference at the end of this page to know the format. Return Promise Sample code Update status of multiple records Javascript var app = YOUR_APP_ID; var recordStatusUpdateItem = { id: YOUR_RECORD_ID, action: 'YOUR_ACTION_NAME', assignee: 'YOUR_ASSIGNEE', revision: 'YOUR_RECORD_REVISION' } var records = [ recordStatusUpdateItem, // another data like recordStatusUpdateItem ]; kintoneRecord.updateRecordsStatus({app, records}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const recordStatusUpdateItem = { id: YOUR_RECORD_ID, action: 'YOUR_ACTION_NAME', assignee: 'YOUR_ASSIGNEE', revision: YOUR_RECORD_REVISION } const records = [ recordStatusUpdateItem, //another data like recordStatusUpdateItem ]; kintoneRecord.updateRecordsStatus({app, records}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); getComments(params) Retrieves multiple comments from a record in an app. Parameters Name Type Required Description params Object yes Params to get comments params.app Integer yes The kintone app ID params.record Integer yes The ID of record params.order String (optional) The sort order of the Comment ID. Please select asc or desc params.offset Integer (optional) The number of first comments will be ignored. params.limit Integer (optional) The number of records to retrieve. Return Promise Sample code Get comments Javascript var app = YOUR_APP_ID; var record = YOUR_RECORD_ID; var order = 'YOUR_ORDER_TYPE'; // asc or desc var offset = YOUR_OFFSET_NUMBER; var limit = YOUR_LIMIT_NUMBER; kintoneRecord.getComments({app, record, order, offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const record = YOUR_RECORD_ID; const order = 'YOUR_ORDER_TYPE'; // asc or desc const offset = YOUR_OFFSET_NUMBER; const limit = YOUR_LIMIT_NUMBER; kintoneRecord.getComments({app, record, order, offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); addComment(params) Add a comment to a record in an app. Parameters Name Type Required Description params Object yes Params to add comment params.app Integer yes The kintone app ID params.record Integer yes The ID of record params.comment JSONObject yes About the format, please look at the sample below or reference at the end of this page. Return Promise Sample code Add comment Javascript var app = YOUR_APP_ID; var record = YOUR_RECORD_ID; var comment = { text: 'YOUR_COMMENT_CONTENT', mentions: [ { code: 'YOUR_MEMBER_CODE', type: 'YOUR_MEMBER_TYPE' // either `USER` or `GROUP` or `ORGANIZATION` }, // another mention here ] }; kintoneRecord.addComment({app, record, comment}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const record = YOUR_RECORD_ID; const comment = { text: 'YOUR_COMMENT_CONTENT', mentions: [ { code: 'YOUR_MEMBER_CODE', type: 'YOUR_MEMBER_TYPE' // either `USER` or `GROUP` or `ORGANIZATION` }, // another mention here ] }; kintoneRecord.addComment({app, record, comment}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); deleteComment(params) Delete a comment in a record in an app. Parameters Name Type Required Description params Object yes Params to delete comment params.app Integer yes The kintone app ID params.record Integer yes The record ID on kintone app params.comment Integer yes The comment ID on kintone record Return Promise Sample code Delete comment Javascript var app = YOUR_APP_ID; var record = YOUR_RECORD_ID; var comment = YOUR_COMMENT_ID; kintoneRecord.deleteComment({app, record, comment}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const record = YOUR_RECORD_ID; const comment = YOUR_COMMENT_ID; kintoneRecord.deleteComment({app, record, comment}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Reference Get Record on developer network Add Record on developer network Update Record on developer network Delete Record on developer network Get Comments on developer network Add Comment on developer network Delete Comment on developer network Update Record Status on developer network Update Record Assignees on developer network","title":"Record"},{"location":"reference/record/#record","text":"Provide manipulate functions on records: get, update, delete, update the record status & assignees in the kintone app","title":"Record"},{"location":"reference/record/#constructor","text":"Parameters Name Type Required Description params Object (conditional) Required for nodejs Constructor params. params.connection Connection (conditional) The connection module of this SDK. If initializing in a browser environment on kintone, this parameter can be omitted to use session authentication. Sample code Init record module Javascript (function(kintoneJSSDK) { 'use strict'; // with connection // Define Authentication object var kintoneAuth = new kintoneJSSDK.Auth(); var paramsAuth = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; kintoneAuth.setPasswordAuth(paramsAuth); var paramsConnection = { domain: 'YOUR_DOMAIN', auth: kintoneAuth }; var connection = new kintoneJSSDK.Connection(paramsConnection); var kintoneRecord = new kintoneJSSDK.Record({connection}); // without connection, module will use session authentication of kintone var kintoneRecord = new kintoneJSSDK.Record(); }(window.kintoneJSSDK)); Nodejs const kintone = require('@kintone/kintone-js-sdk'); const kintoneAuth = new kintone.Auth(); const paramsAuth = { username: 'YOUR_USER_NAME', password: 'YOUR_PASSWORD' }; kintoneAuth.setPasswordAuth(paramsAuth); const paramsConnection = { domain: 'YOUR_DOMAIN', auth: kintoneAuth }; const connection = new kintone.Connection(paramsConnection); const kintoneRecord = new kintone.Record({connection});","title":"Constructor"},{"location":"reference/record/#methods","text":"","title":"Methods"},{"location":"reference/record/#getrecordparams","text":"Retrieves details of 1 record from an app. Parameters Name Type Required Description params Object yes Get record params params.app Integer yes The kintone app ID params.id Integer yes The record ID in kintone app Return Promise Sample code Get record Javascript var app = YOUR_APP_ID; var id = YOUR_RECORD_ID; kintoneRecord.getRecord({app, id}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const id = YOUR_RECORD_ID; kintoneRecord.getRecord({app, id}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"getRecord(params)"},{"location":"reference/record/#getrecordsparams","text":"Retrieves details of multiple records from an app using a query string. Parameters Name Type Required Description params Object yes Get records params params.app Integer yes The kintone app ID params.query String (optional) The query string that will specify what records will be responded. params.fields Array<String> (optional) List of field codes you want in the response. params.totalCount Boolean (optional) If \"true\", the request will retrieve the total count of records match with query conditions. Return Promise Sample code Get records Javascript var app = YOUR_APP_ID; var query = 'YOUR_QUERY_STRING'; var fields = [ 'YOUR_FIELD_CODE', // another fieldCode ] var totalCount = 'YOUR_DECIDE_TRUE_OR_FALSE'; kintoneRecord.getRecords({app, query, fields, totalCount}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const query = 'YOUR_QUERY_STRING'; const fields = [ 'YOUR_FIELD_CODE', // another fieldCode ] const totalCount = 'YOUR_DECIDE_TRUE_OR_FALSE'; kintoneRecord.getRecords({app, query, fields, totalCount}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"getRecords(params)"},{"location":"reference/record/#getallrecordsbyqueryparams","text":"Retrieves details of all records from an app using a query string. Number of records can be retrieved at once is greater than the default limitations Parameters Name Type Required Description params Object yes Get records by query params params.app Integer yes The kintone app ID params.query String (optional) The query string that will specify what records will be responded. params.fields Array<String> (optional) List of field codes you want in the response. params.totalCount Boolean (optional) If \"true\", the request will retrieve the total count of records match with query conditions. params.seek Boolean (optional) Default value is \"false\". \u30fbfalse\uff1ausing offset method You can get all records within the limits of offset.(\u203b Around July 2020, cybozu plan to set an offset upper limit of 10,000 ) You can not specify \"offset\" and \"limit\" clause on the query when you use offset method because these clauses are already used internally. \u30fbtrue\uff1ausing seek method You get all records(over limitation of offset) in order by record ID. But you can not specify \"order by\", \"offset\" and \"limit\" clause on the query when you use seek method because these clauses are already used internally. usage about offset and seek method \u30fbusage about offset method and seek method(ja) \u30fbinfo about offset method(us) \u30fbinfo about seek method(us) Return Promise Sample code Get all records by the query without limitation Javascript var app = YOUR_APP_ID; var query = 'YOUR_QUERY_STRING'; var fields = [ 'YOUR_FIELD_CODE', // another fieldCode ] var totalCount = 'YOUR_DECIDE_TRUE_OR_FALSE'; var seek = 'YOUR_DECIDE_TRUE_OR_FALSE'; kintoneRecord.getAllRecordsByQuery({app, query, fields, totalCount, seek}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const query = 'YOUR_QUERY_STRING'; const fields = [ 'YOUR_FIELD_CODE', // another fieldCode ] const totalCount = 'YOUR_DECIDE_TRUE_OR_FALSE'; const seek = 'YOUR_DECIDE_TRUE_OR_FALSE'; kintoneRecord.getAllRecordsByQuery({app, query, fields, totalCount, seek}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"getAllRecordsByQuery(params)"},{"location":"reference/record/#getallrecordsbycursorparams","text":"Retrieves details of all records from an app using a query string. Can't indicate limit and offset of the query. Number of records can be retrieved at once is greater than the default limitations Parameters Name Type Required Description params Object yes Params to get all record by cursor params.app Integer yes The kintone app ID params.query String (optional) The query string that will specify what records will be responded. option.fields Array<String> (optional) List of field codes you want in the response. Return Promise Sample code Get all records by cursor Javascript var rcOption = { app: YOUR_APP_ID, fields: [ 'YOUR_FIELD_CODE', // another fieldCode ], query: 'YOUR_QUERY_STRING' }; kintoneRecord.getAllRecordsByCursor(rcOption).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const rcOption = { app: YOUR_APP_ID, fields: [ 'YOUR_FIELD_CODE', // another fieldCode ], query: 'YOUR_QUERY_STRING' }; kintoneRecord.getAllRecordsByCursor(rcOption).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"getAllRecordsByCursor(params)"},{"location":"reference/record/#addrecordparams","text":"Add one record to an app. Parameters Name Type Required Description params Object yes Params to add record params.app Integer yes The kintone app ID params.record JSONObject (optional) The record data to be added to kintone app. About the format, please look at the sample below or reference at the end of this page Return Promise Sample code Add record Javascript var app = YOUR_APP_ID; var record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; kintoneRecord.addRecord({app, record}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; kintoneRecord.addRecord({app, record}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"addRecord(params)"},{"location":"reference/record/#addrecordsparams","text":"Add multiple records to an app. Can insert upto 100 record to kintone app. Parameters Name Type Required Description params Object yes Params to add records params.app Integer yes The kintone app ID params.records Array<JSONObject> yes List of records data to be added to kintone app. About the format, please look at the sample below or reference at the end of this page. Return Promise Sample code Add multiple records Javascript var app = YOUR_APP_ID; var record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; var records = [ record, // another record ]; kintoneRecord.addRecords({app, records}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; const records = [ record // another record ]; kintoneRecord.addRecords({app, records}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"addRecords(params)"},{"location":"reference/record/#addallrecordsparams","text":"Add multiple records to an app. Can insert unlimited number of records to kintone app, rollback can be performed on each block of 2000 records. Parameters Name Type Required Description params Object yes Params to add all record params.app Integer yes The kintone app ID params.records Array<JSONObject> yes List of records data to be added to kintone app. About the format, please look at the sample below or reference at the end of this page. Return Promise Sample code Add all records without limitation Javascript var app = YOUR_APP_ID; var record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; var records = [ record, // another record ]; kintoneRecord.addAllRecords({app, records}).then((rsp) => { console.log(rsp); }).catch((err) => { // Ex: User update 6000 records: // Case 1: the error occurs in record 0 // err response // { // results: [KintoneAPIException, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},{}] // } // Case 2: the error occurs in record 4000 // err response // { // results: [ // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // KintoneAPIException, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {} // ] // } console.log(err) }); Nodejs const app = YOUR_APP_ID; const record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; const records = [ record // another record ]; kintoneRecord.addAllRecords({app, records}).then((rsp) => { console.log(rsp); }).catch((err) => { // Ex: User update 6000 records: // Case 1: the error occurs in record 0 // err response // { // results: [KintoneAPIException, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},{}] // } // Case 2: the error occurs in record 4000 // err response // { // results: [ // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // KintoneAPIException, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {} // ] // } console.log(err) });","title":"addAllRecords(params)"},{"location":"reference/record/#updaterecordbyidparams","text":"Updates details of 1 record in an app by specifying its record number. Parameters Name Type Required Description params Object yes Params to update record by id params.app Integer yes The kintone app ID params.id Integer yes The record ID on kintone app params.record JSONObject (optional) The record data to be updated in kintone app. About the format, please look at the sample below or reference at the end of this page. params.revision Integer (optional) The revision number of record Return Promise Sample code Update record by ID Javascript var app = YOUR_APP_ID; var id = YOUR_RECORD_ID; var record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; var revision = REVISION_OF_RECORD; kintoneRecord.updateRecordByID({app, id, record, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const id = YOUR_RECORD_ID; const record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; const revision = REVISION_OF_RECORD; kintoneRecord.updateRecordByID({app, id, record, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"updateRecordByID(params)"},{"location":"reference/record/#updaterecordbyupdatekeyparams","text":"Updates details of 1 record in an app by a unique key. Parameters Name Type Required Description params Object yes Params to update record by update key params.app Integer yes The kintone app ID params.updateKey JSONObject yes The unique key of the record to be updated. About the format, please look at the sample below or reference at the end of this page. params.record JSONObject (optional) The record data will be updated to kintone app. About the format, please look at the sample below or reference at the end of this page. params.revision Integer (optional) The revision number of record Return Promise Sample code Update record by UpdateKey Javascript var app = YOUR_APP_ID; var updateKey = { field: 'YOUR_FIELD_CODE', value: 'YOUR_FIELD_CODE_VALUE' }; var record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; var revision = REVISION_OF_RECORD; kintoneRecord.updateRecordByUpdateKey({app, updateKey, record, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const updateKey = { field: 'YOUR_FIELD_CODE', value: 'YOUR_FIELD_CODE_VALUE' }; const record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; const revision = REVISION_OF_RECORD; kintoneRecord.updateRecordByUpdateKey({app, updateKey, record, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"updateRecordByUpdateKey(params)"},{"location":"reference/record/#updaterecordsparams","text":"Updates details of multiple records in an app, by specifying their record number, or a different unique key. Can update upto 100 records to kintone app. Parameters Name Type Required Description params Object yes Params to update records params.app Integer yes The kintone app ID params.records Array<JSONObject> (optional) The record data will be updated to kintone app. About the format, please look at the sample below or reference at the end of this page. Return Promise Sample code Update multiple records Javascript var app = YOUR_APP_ID; var record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; // This object can not have both \"id\" and \"updateKey\" keys at the same time. var recordUpdate = { // Required, if updateKey will not be specified. id: YOUR_RECORD_ID, // Required, if id will not be specified. updateKey: { field: 'YOUR_FIELD_CODE', value: 'YOUR_FIELD_CODE_VALUE' }, record: record, revision: RECORD_REVISION_NUMBER }; var records= [ recordUpdate, // Another recordUpdate ] kintoneRecord.updateRecords({app, records}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; // This object can not have both \"id\" and \"updateKey\" keys at the same time. const recordUpdate = { // Required, if updateKey will not be specified. id: YOUR_RECORD_ID, // Required, if id will not be specified. updateKey: { field: 'YOUR_FIELD_CODE', value: 'YOUR_FIELD_CODE_VALUE' }, record: record, revision: RECORD_REVISION_NUMBER }; const records = [ recordUpdate, // Another recordUpdate ] kintoneRecord.updateRecords({app, records}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"updateRecords(params)"},{"location":"reference/record/#updateallrecordsparams","text":"Updates details of multiple records in an app, by specifying their record number, or a different unique key. Can update unlimited number of records to kintone app, rollback can be performed on each block of 2000 records. Parameters Name Type Required Description params Object yes Params to update all records params.app Integer yes The kintone app ID params.records Array<JSONObject> yes The record data will be updated to kintone app. About the format, please look at the sample below or reference at the end of this page. Return Promise Sample code Update all records without limitation Javascript var app = YOUR_APP_ID; var record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; // This object can not have both \"id\" and \"updateKey\" keys at the same time. var recordUpdate = { // Required, if updateKey will not be specified. id: YOUR_RECORD_ID, // Required, if id will not be specified. updateKey: { field: 'YOUR_FIELD_CODE', value: 'YOUR_FIELD_CODE_VALUE' }, record: record, revision: RECORD_REVISION_NUMBER }; var records = [ recordUpdate, // Another recordUpdate ] kintoneRecord.updateAllRecords({app, records}).then((rsp) => { console.log(rsp); }).catch((err) => { // Ex: User update 6000 records: // Case 1: the error occurs in record 0 // err response // { // results: [KintoneAPIException, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},{}] // } // Case 2: the error occurs in record 4000 // err response // { // results: [ // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // KintoneAPIException, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {} // ] // } console.log(err) }); Nodejs const app = YOUR_APP_ID; const record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; // This object can not have both \"id\" and \"updateKey\" keys at the same time. const recordUpdate = { // Required, if updateKey will not be specified. id: YOUR_RECORD_ID, // Required, if id will not be specified. updateKey: { field: 'YOUR_FIELD_CODE', value: 'YOUR_FIELD_CODE_VALUE' }, record: record, revision: RECORD_REVISION_NUMBER }; const records = [ recordUpdate, // Another recordUpdate ] kintoneRecord.updateAllRecords({app, records}).then((rsp) => { console.log(rsp); }).catch((err) => { // Ex: User update 6000 records: // Case 1: the error occurs in record 0 // err response // { // results: [KintoneAPIException, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},{}] // } // Case 2: the error occurs in record 4000 // err response // { // results: [ // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // KintoneAPIException, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {} // ] // } console.log(err) });","title":"updateAllRecords(params)"},{"location":"reference/record/#deleterecordsparams","text":"Delete multiple records in an app. Can delete upto 100 records to kintone app. Parameters Name Type Required Description params Object yes Params to delete records params.app Integer yes The kintone app ID params.ids Array<Integer> yes The list ids of record will be delete. Return None Sample code Delete multi record Javascript var app = YOUR_APP_ID; var ids = [YOUR_RECORD_ID] kintoneRecord.deleteRecords({app, ids}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const ids = [YOUR_RECORD_ID] kintoneRecord.deleteRecords({app, ids}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"deleteRecords(params)"},{"location":"reference/record/#deleterecordswithrevisionparams","text":"Delete multiple records in an app with revision. Parameters Name Type Required Description params Object yes Params to delete record with revision params.app Integer yes The kintone app ID params.idsWithRevision JSONObject yes JSONObject format by HashTable< Integer , Integer > ( key : The Id of record , value : The Revision of record. ) Return None Sample code Delete record with revision Javascript var app = YOUR_APP_ID; var idsWithRevision = { YOUR_RECORD_ID: REVISION_OF_RECORD } kintoneRecord.deleteRecordsWithRevision({app, idsWithRevision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const idsWithRevision = { YOUR_RECORD_ID: REVISION_OF_RECORD } kintoneRecord.deleteRecordsWithRevision({app, idsWithRevision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"deleteRecordsWithRevision(params)"},{"location":"reference/record/#deleteallrecordsbyqueryparams","text":"Deletes all records in an app by query string Can delete unlimited number of records to kintone app, rollback can be performed on each block of 2000 records. Parameters Name Type Required Description params Object yes Delete all records by query params.app Integer yes The kintone app ID params.query String (optional) The query string that will specify what records will be responded. The query parameter can't indicate limit and offset. Return Promise Sample code Delete all records by query string Javascript var app = YOUR_APP_ID; var query = 'YOUR_QUERY_STRING'; kintoneRecord.deleteAllRecordsByQuery({app, query}).then((rsp) => { console.log(rsp); }) .catch((err) => { // Ex: User update 6000 records: // Case 1: the error occurs in record 0 // err response // { // results: [KintoneAPIException, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},{}] // } // Case 2: the error occurs in record 4000 // err response // { // results: [ // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // KintoneAPIException, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {} // ] // } console.log(err) }); Nodejs const app = YOUR_APP_ID; const query = 'YOUR_QUERY_STRING'; kintoneRecord.deleteAllRecordsByQuery({app, query}).then((rsp) => { console.log(rsp); }) .catch((err) => { // Ex: User update 6000 records: // Case 1: the error occurs in record 0 // err response // { // results: [KintoneAPIException, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},{}] // } // Case 2: the error occurs in record 4000 // err response // { // results: [ // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // KintoneAPIException, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {} // ] // } console.log(err) });","title":"deleteAllRecordsByQuery(params)"},{"location":"reference/record/#upsertrecordparams","text":"Insert or update a record to kintone app. Insert the record if the updateKey doesn't exist and update the record if the updateKey exists. Parameters Name Type Required Description params Object yes Params to upsert record params.app Integer yes The kintone app ID params.updateKey JSONObject yes The unique key of the record to be updated. About the format, please look at the sample below or reference at the end of this page. params.record JSONObject yes The record data will be added to kintone app. About the format, please look at the sample below or reference at the end of this page. params.revision Integer (optional) The revision number of record Return Promise Sample code Upsert record by UpdateKey Javascript var app = YOUR_APP_ID; var updateKey = { field: 'YOUR_FIELD_CODE', value: 'YOUR_FIELD_CODE_VALUE' }; var record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; var revision = REVISION_OF_RECORD; kintoneRecord.upsertRecord({app, updateKey, record, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const updateKey = { field: 'YOUR_FIELD_CODE', value: 'YOUR_FIELD_CODE_VALUE' }; const record = { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE' }, // Another fieldcode here }; const revision = REVISION_OF_RECORD; kintoneRecord.upsertRecord({app, updateKey, record, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"upsertRecord(params)"},{"location":"reference/record/#upsertrecordsparams","text":"Insert or update up to 1500 records to kintone app. If the records are over 1500, It is thrown Error. Insert the records if the updateKey doesn't exist and update the records if the updateKey exists. Parameters Name Type Required Description params Object yes Params to upsert records params.app Integer yes The kintone app ID params.records Array<JSONObject> yes The record data Array which has updateKey and record. About the format, please look at the sample below or reference at the end of this page. Return Promise Sample code Upsert records by UpdateKey Javascript var app = YOUR_APP_ID; var records = [ { updateKey: { field: 'YOUR_FIELD_CODE', value: 'YOUR_FIELD_CODE_VALUE_1' }, record: { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE 1' }, } }, { updateKey: { field: 'YOUR_FIELD_CODE', value: 'YOUR_FIELD_CODE_VALUE_2' }, record: { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE 2' }, } }, { updateKey: { field: 'YOUR_FIELD_CODE', value: 'YOUR_FIELD_CODE_VALUE_3' }, record: { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE 3' }, } } ]; kintoneRecord.upsertRecords({app, records}).then((resp) => { console.log(resp); }).catch((err) => { /// Ex: User upsert over 100 records: // Case 1: the error occurs on a first record // err response // { // results: [KintoneAPIException, {},...] // } // Case 2: the error occurs on the 100th or more record // err response // { // results: [{},..., KintoneAPIException, {},...] // } console.log(err); }); Nodejs const app = YOUR_APP_ID; const records = [ { updateKey: { field: 'YOUR_FIELD_CODE', value: 'YOUR_FIELD_CODE_VALUE_1' }, record: { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE 1' }, } }, { updateKey: { field: 'YOUR_FIELD_CODE', value: 'YOUR_FIELD_CODE_VALUE_2' }, record: { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE 2' }, } }, { updateKey: { field: 'YOUR_FIELD_CODE', value: 'YOUR_FIELD_CODE_VALUE_3' }, record: { YOUR_FIELD_CODE: { value: 'VALUE_OF_YOUR_FIELD_CODE 3' }, } } ]; kintoneRecord.upsertRecords({app, records}).then((resp) => { console.log(resp); }).catch((err) => { /// Ex: User upsert over 100 records: // Case 1: the error occurs on a first record // err response // { // results: [KintoneAPIException, {},...] // } // Case 2: the error occurs on the 100th or more record // err response // { // results: [{},..., KintoneAPIException, {},...] // } console.log(err); });","title":"upsertRecords(params)"},{"location":"reference/record/#updaterecordassigneesparams","text":"Update assignees of a record. Parameters Name Type Required Description params Object yes Params to update record assignees params.app Integer yes The kintone app ID params.id Integer yes The record ID of kintone app params.assignees Array<String> yes The user codes of the assignees params.revision Integer (optional) The revision number of record Return Promise Sample code update record Assignees Javascript var app = YOUR_APP_ID; var id = YOUR_RECORD_ID; var assignees = ['YOUR_ASSIGNEE']; var revision = REVISION_OF_RECORD; kintoneRecord.updateRecordAssignees({app, id, assignees, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const id = YOUR_RECORD_ID; const assignees = ['YOUR_ASSIGNEE']; const revision = REVISION_OF_RECORD; kintoneRecord.updateRecordAssignees({app, id, assignees, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"updateRecordAssignees(params)"},{"location":"reference/record/#updaterecordstatusparams","text":"Updates the Status of a record of an app. Parameters Name Type Required Description params Object yes Params to update record status params.app Integer yes The kintone app ID. params.id Integer yes The record ID on kintone app. params.action String yes The Action name will be run. params.assignee String (conditional) The next Assignee. Specify the Assignee's login name. Required, if the \"Assignee List\" of the current status is set to \"User chooses one assignee from the list to take action\", and a selectable assignee exists. params.revision Integer (optional) The revision of record Return Promise Sample code Update record status Javascript var app = YOUR_APP_ID; var id = YOUR_RECORD_ID; var action = 'YOUR_ACTION_NAME'; var assignee = 'YOUR_ASSIGNEE'; var revision = REVISION_OF_RECORD; kintoneRecord.updateRecordStatus({app, id, action, assignee, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const id = YOUR_RECORD_ID; const action = YOUR_ACTION_NAME; const assignee = 'YOUR_ASSIGNEE'; const revision = REVISION_OF_RECORD; kintoneRecord.updateRecordStatus({app, id, action, assignee, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"updateRecordStatus(params)"},{"location":"reference/record/#updaterecordsstatusparams","text":"Updates the Status of multiple records of an app. Parameters Name Type Required Description params Object yes Params to update records status params.app Integer yes The kintone app ID params.records Array<JSONObject> yes The record status data. See the below sample codes and reference at the end of this page to know the format. Return Promise Sample code Update status of multiple records Javascript var app = YOUR_APP_ID; var recordStatusUpdateItem = { id: YOUR_RECORD_ID, action: 'YOUR_ACTION_NAME', assignee: 'YOUR_ASSIGNEE', revision: 'YOUR_RECORD_REVISION' } var records = [ recordStatusUpdateItem, // another data like recordStatusUpdateItem ]; kintoneRecord.updateRecordsStatus({app, records}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const recordStatusUpdateItem = { id: YOUR_RECORD_ID, action: 'YOUR_ACTION_NAME', assignee: 'YOUR_ASSIGNEE', revision: YOUR_RECORD_REVISION } const records = [ recordStatusUpdateItem, //another data like recordStatusUpdateItem ]; kintoneRecord.updateRecordsStatus({app, records}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"updateRecordsStatus(params)"},{"location":"reference/record/#getcommentsparams","text":"Retrieves multiple comments from a record in an app. Parameters Name Type Required Description params Object yes Params to get comments params.app Integer yes The kintone app ID params.record Integer yes The ID of record params.order String (optional) The sort order of the Comment ID. Please select asc or desc params.offset Integer (optional) The number of first comments will be ignored. params.limit Integer (optional) The number of records to retrieve. Return Promise Sample code Get comments Javascript var app = YOUR_APP_ID; var record = YOUR_RECORD_ID; var order = 'YOUR_ORDER_TYPE'; // asc or desc var offset = YOUR_OFFSET_NUMBER; var limit = YOUR_LIMIT_NUMBER; kintoneRecord.getComments({app, record, order, offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const record = YOUR_RECORD_ID; const order = 'YOUR_ORDER_TYPE'; // asc or desc const offset = YOUR_OFFSET_NUMBER; const limit = YOUR_LIMIT_NUMBER; kintoneRecord.getComments({app, record, order, offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"getComments(params)"},{"location":"reference/record/#addcommentparams","text":"Add a comment to a record in an app. Parameters Name Type Required Description params Object yes Params to add comment params.app Integer yes The kintone app ID params.record Integer yes The ID of record params.comment JSONObject yes About the format, please look at the sample below or reference at the end of this page. Return Promise Sample code Add comment Javascript var app = YOUR_APP_ID; var record = YOUR_RECORD_ID; var comment = { text: 'YOUR_COMMENT_CONTENT', mentions: [ { code: 'YOUR_MEMBER_CODE', type: 'YOUR_MEMBER_TYPE' // either `USER` or `GROUP` or `ORGANIZATION` }, // another mention here ] }; kintoneRecord.addComment({app, record, comment}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const record = YOUR_RECORD_ID; const comment = { text: 'YOUR_COMMENT_CONTENT', mentions: [ { code: 'YOUR_MEMBER_CODE', type: 'YOUR_MEMBER_TYPE' // either `USER` or `GROUP` or `ORGANIZATION` }, // another mention here ] }; kintoneRecord.addComment({app, record, comment}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"addComment(params)"},{"location":"reference/record/#deletecommentparams","text":"Delete a comment in a record in an app. Parameters Name Type Required Description params Object yes Params to delete comment params.app Integer yes The kintone app ID params.record Integer yes The record ID on kintone app params.comment Integer yes The comment ID on kintone record Return Promise Sample code Delete comment Javascript var app = YOUR_APP_ID; var record = YOUR_RECORD_ID; var comment = YOUR_COMMENT_ID; kintoneRecord.deleteComment({app, record, comment}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); }); Nodejs const app = YOUR_APP_ID; const record = YOUR_RECORD_ID; const comment = YOUR_COMMENT_ID; kintoneRecord.deleteComment({app, record, comment}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err); });","title":"deleteComment(params)"},{"location":"reference/record/#reference","text":"Get Record on developer network Add Record on developer network Update Record on developer network Delete Record on developer network Get Comments on developer network Add Comment on developer network Delete Comment on developer network Update Record Status on developer network Update Record Assignees on developer network","title":"Reference"}]}